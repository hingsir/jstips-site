{"2016-01-20-return-objects-to-enable-chaining-of-functions.md":{"name":"2016-01-20-return-objects-to-enable-chaining-of-functions.md","sha":"e985f7fe04837683a9ea212a98da8fa7f706ab39","content":"---\nlayout: post\n\ntitle: Return objects to enable chaining of functions\ntip-number: 20\ntip-username: WakeskaterX\ntip-username-profile: https://twitter.com/WakeStudio\ntip-tldr: When creating functions on an object in Object Oriented Javascript, returning the object in the function will enable you to chain functions together.\n\ncategories:\n    - en\n---\n\nWhen creating functions on an object in Object Oriented Javascript, returning the object in the function will enable you to chain functions together.\n\n```js\nfunction Person(name) {\n  this.name = name;\n\n  this.sayName = function() {\n    console.log(\"Hello my name is: \", this.name);\n    return this;\n  };\n\n  this.changeName = function(name) {\n    this.name = name;\n    return this;\n  };\n}\n\nvar person = new Person(\"John\");\nperson.sayName().changeName(\"Timmy\").sayName();\n```"},"2016-01-16-passing-arguments-to-callback-functions.md":{"name":"2016-01-16-passing-arguments-to-callback-functions.md","sha":"e7b48662d690545b93a19039d9dcfd8b80a03ecd","content":"---\nlayout: post\n\ntitle: Passing arguments to callback functions\ntip-number: 16\ntip-username: minhazav\ntip-username-profile: https://twitter.com/minhazav\ntip-tldr: JavaScript modules and build steps are getting more numerous and complicated, but what about boilerplate in new frameworks?\n\ncategories:\n    - en\n---\n\nBy default you cannot pass arguments to a callback function. For example:\n\n```js\nfunction callback() {\n  console.log('Hi human');\n}\n\ndocument.getElementById('someelem').addEventListener('click', callback);\n\n```\n\nYou can take advantage of the closure scope in Javascript to pass arguments to callback functions. Check this example:\n\n```js\nfunction callback(a, b) {\n  return function() {\n    console.log('sum = ', (a+b));\n  }\n}\n\nvar x = 1, y = 2;\ndocument.getElementById('someelem').addEventListener('click', callback(x, y));\n\n```\n\n### What are closures?\n\nClosures are functions that refer to independent (free) variables. In other words, the function defined in the closure 'remembers' the environment in which it was created. [Check MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) to learn more.\n\nSo this way the arguments `x` and `y` are in scope of the callback function when it is called.\n\nAnother method to do this is using the `bind` method. For example:\n\n```js\nvar alertText = function(text) {\n  alert(text);\n};\n\ndocument.getElementById('someelem').addEventListener('click', alertText.bind(this, 'hello'));\n```\nThere is a very slight difference in performance of both methods, checkout [jsperf](http://jsperf.com/bind-vs-closure-23).\n"},"2016-01-13-tip-to-measure-performance-of-a-javascript-block.md":{"name":"2016-01-13-tip-to-measure-performance-of-a-javascript-block.md","sha":"a75ecdeb05579e9f31be8f3b9fad1f53b1a2b149","content":"---\nlayout: post\n\ntitle: Tip to measure performance of a javascript block\ntip-number: 13\ntip-username: manmadareddy\ntip-username-profile: https://twitter.com/manmadareddy\ntip-tldr: For quickly measuring performance of a javascript block, we can use the console functions like `console.time(label)` and `console.timeEnd(label)`\n\ncategories:\n    - en\n---\n\nFor quickly measuring performance of a javascript block, we can use the console functions like\n[`console.time(label)`](https://developer.chrome.com/devtools/docs/console-api#consoletimelabel) and [`console.timeEnd(label)`](https://developer.chrome.com/devtools/docs/console-api#consoletimeendlabel)\n\n```javascript\nconsole.time(\"Array initialize\");\nvar arr = new Array(100),\n    len = arr.length,\n    i;\n\nfor (i = 0; i < len; i++) {\n    arr[i] = new Object();\n};\nconsole.timeEnd(\"Array initialize\"); // Outputs: Array initialize: 0.711ms\n```\n\nMore info:\n[Console object](https://github.com/DeveloperToolsWG/console-object),\n[Javascript benchmarking](https://mathiasbynens.be/notes/javascript-benchmarking)\n\nDemo: [jsfiddle](https://jsfiddle.net/meottb62/) - [codepen](http://codepen.io/anon/pen/JGJPoa) (outputs in browser console)"},"2016-01-11-hoisting.md":{"name":"2016-01-11-hoisting.md","sha":"d3df70ede0fc50221e862cf95228b01dbeaf859a","content":"---\nlayout: post\n\ntitle: Hoisting\ntip-number: 11\ntip-username: squizzleflip\ntip-username-profile: https://twitter.com/squizzleflip\ntip-tldr: JavaScript modules and build steps are getting more numerous and complicated, but what about boilerplate in new frameworks?\n\ncategories:\n    - en\n---\n\nUnderstanding [hoisting](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#var_hoisting) will help you organize your function scope. Just remember, variable declarations and function definitions are hoisted to the top. Variable definitions are not, even if you declare and define a variable on the same line. Also, a variable **declaration** lets the system know that the variable exists while **definition** assigns it a value.\n\n```javascript\nfunction doTheThing() {\n  // ReferenceError: notDeclared is not defined\n  console.log(notDeclared);\n\n  // Outputs: undefined\n  console.log(definedLater);\n  var definedLater;\n\n  definedLater = 'I am defined!'\n  // Outputs: 'I am defined!'\n  console.log(definedLater)\n\n  // Outputs: undefined\n  console.log(definedSimulateneously);\n  var definedSimulateneously = 'I am defined!'\n  // Outputs: 'I am defined!'\n  console.log(definedSimulateneously)\n\n  // Outputs: 'I did it!'\n  doSomethingElse();\n\n  function doSomethingElse(){\n    console.log('I did it!');\n  }\n\n  // TypeError: undefined is not a function\n  functionVar();\n\n  var functionVar = function(){\n    console.log('I did it!');\n  }\n}\n```\n\nTo make things easier to read, declare all of your variables at the top of your function scope so it is clear which scope the variables are coming from. Define your variables before you need to use them. Define your functions at the bottom of your scope to keep them out of your way."},"2016-02-04-assignment-shorthands.md":{"name":"2016-02-04-assignment-shorthands.md","sha":"6799ddb22f162aca1cabeb904a4fe6363ff92482","content":"---\nlayout: post\n\ntitle: Assignment Operators\ntip-number: 35\ntip-username: hsleonis\ntip-username-profile: https://github.com/hsleonis\ntip-tldr: Assigning is very common. Sometimes typing becomes time consuming for us 'Lazy programmers'. So, we can use some tricks to help us and make our code cleaner and simpler.\n\ncategories:\n    - en\n---\n\nAssigning is very common. Sometimes typing becomes time consuming for us 'Lazy programmers'.\nSo, we can use some tricks to help us and make our code cleaner and simpler.\n\nThis is the similar use of\n\n````javascript\nx += 23; // x = x + 23;\ny -= 15; // y = y - 15;\nz *= 10; // z = z * 10;\nk /= 7; // k = k / 7;\np %= 3; // p = p % 3;\nd **= 2; // d = d ** 2;\nm >>= 2; // m = m >> 2;\nn <<= 2; // n = n << 2;\nn ++; // n = n + 1;\nn --; n = n - 1;\n\n````\n\n### `++` and `--` operators\n\nThere is a special `++` operator. It's best to explain it with an example:\n\n````javascript\nvar a = 2;\nvar b = a++;\n// Now a is 3 and b is 2\n````\n\nThe `a++` statement does this:\n  1. return the value of `a`\n  2. increment `a` by 1\n\nBut what if we wanted to increment the value first? It's simple:\n\n````javascript\nvar a = 2;\nvar b = ++a;\n// Now both a and b are 3\n````\n\nSee? I put the operator _before_ the variable.\n\nThe `--` operator is similar, except it decrements the value.\n\n### If-else (Using ternary operator)\n\nThis is what we write on regular basis.\n\n````javascript\nvar newValue;\nif(value > 10) \n  newValue = 5;\nelse\n  newValue = 2;\n````\n\nWe can user ternary operator to make it awesome:\n\n````javascript\nvar newValue = (value > 10) ? 5 : 2;\n````\n\n### Null, Undefined, Empty Checks\n\n````javascript\nif (variable1 !== null || variable1 !== undefined || variable1 !== '') {\n     var variable2 = variable1;\n}\n````\n\nShorthand here:\n\n````javascript\nvar variable2 = variable1  || '';\n````\nP.S.: If variable1 is a number, then first check if it is 0.\n\n### Object Array Notation\n\nInstead of using:\n\n````javascript\nvar a = new Array();\na[0] = \"myString1\";\na[1] = \"myString2\";\n````\nUse this:\n\n````javascript\nvar a = [\"myString1\", \"myString2\"];\n````\n\n### Associative array\n\nInstead of using:\n\n````javascript\nvar skillSet = new Array();\nskillSet['Document language'] = 'HTML5';\nskillSet['Styling language'] = 'CSS3';\n````\n\nUse this:\n\n````javascript\nvar skillSet = {\n    'Document language' : 'HTML5', \n    'Styling language' : 'CSS3'\n};\n````\n"},"2016-01-28-curry-vs-partial-application.md":{"name":"2016-01-28-curry-vs-partial-application.md","sha":"d26cd294ec9ed3943c2ffbd49ee11216e1383dc4","content":"---\nlayout: post\n\ntitle: Currying vs partial application\ntip-number: 28\ntip-username: bhaskarmelkani\ntip-username-profile: https://www.twitter.com/bhaskarmelkani\ntip-tldr: Currying and partial application are two ways of transforming a function into another function with a generally smaller arity.\n\n\ncategories:\n    - en\n---\n\n**Currying**\n\nCurrying takes a function \n\nf: X * Y -> R\n\nand turns it into a function\n\nf': X -> (Y -> R)\n\nInstead of calling f with two arguments, we invoke f' with the first argument. The result is a function that we then call with the second argument to produce the result. \n\nThus, if the uncurried f is invoked as\n\nf(3,5)\n\nthen the curried f' is invoked as\n\nf(3)(5)\n\nFor example:\nUncurried add()\n\n```javascript\n\nfunction add(x, y) {\n  return x + y;\n}\n\nadd(3, 5);   // returns 8\n```\n\nCurried add()\n\n```javascript\nfunction addC(x) {\n  return function (y) {\n    return x + y;\n  }\n}\n\naddC(3)(5);   // returns 8\n```\n\n**The algorithm for currying.** \n\nCurry takes a binary function and returns a unary function that returns a unary function.\n\ncurry: (X × Y → R) → (X → (Y → R))\n\nJavascript Code:\n\n```javascript\nfunction curry(f) {\n  return function(x) {\n    return function(y) {\n      return f(x, y);\n    }\n  }\n}\n```\n\n**Partial application**\n\nPartial application takes a function\n\nf: X * Y -> R\n\nand a fixed value for the first argument to produce a new function\n\nf`: Y -> R\n\nf' does the same as f, but only has to fill in the second parameter which is why its arity is one less than the arity of f.\n\nFor example: Binding the first argument of function add to 5 produces the function plus5.\n\n```javascript\nfunction plus5(y) {\n  return 5 + y;\n}\n\nplus5(3);  // returns 8\n```\n\n**The algorithm of partial application.*** \n\npartApply takes a binary function and a value and produces a unary function. \n\npartApply : ((X × Y → R) × X) → (Y → R)\n\nJavascript Code:\n\n```javascript\nfunction partApply(f, x) {\n  return function(y) {\n    return f(x, y);\n  }\n}\n```\n"},"2016-02-02-create-range-0...n-easily-using-one-line.md":{"name":"2016-02-02-create-range-0...n-easily-using-one-line.md","sha":"3849109e86593f9c15b92b497aa5f847fa30f54d","content":"---\nlayout: post\n\ntitle: Create array sequence `[0, 1, ..., N-1]` in one line\ntip-number: 33\ntip-username: SarjuHansaliya\ntip-username-profile: https://github.com/SarjuHansaliya\ntip-tldr: Compact one-liners that generate ordinal sequence arrays\n\n\ncategories:\n    - en\n---\n\nHere are two compact code sequences to generate the `N`-element array `[0, 1, ..., N-1]`:\n\n### Solution 1 (requires ES5)\n```js\nArray.apply(null, {length: N}).map(Function.call, Number);\n```\n#### Brief explanation\n1. `Array.apply(null, {length: N)` returns an `N`-element array filled with `undefined` (i.e. `A = [undefined, undefined, ...]`).\n2. `A.map(Function.call, Number)` returns an `N`-element array, whose index `I` gets the result of `Function.call.call(Number, undefined, I, A)`\n3. `Function.call.call(Number, undefined, I, A)` collapses into `Number(I)`, which is naturally `I`.\n4. Result: `[0, 1, ..., N-1]`.\n\nFor a more thorough explanation, go [here](https://github.com/gromgit/jstips-xe/blob/master/tips/33.md).\n\n### Solution 2 (requires ES6)\n```js\nArray.from(new Array(N),(val,index)=>index);\n```\n#### Brief explanation\n1. `A = new Array(N)` returns an array with `N` _holes_ (i.e. `A = [,,,...]`, but `A[x] = undefined` for `x` in `0...N-1`).\n2. `F = (val,index)=>index` is simply `function F (val, index) { return index; }`\n3. `Array.from(A, F)` returns an `N`-element array, whose index `I` gets the results of `F(A[I], I) == I`.\n4. Result: `[0, 1, ..., N-1]`.\n\n### One More Thing\nIf you actually want the sequence [1, 2, ..., N], **Solution 1** becomes:\n```js\nArray.apply(null, {length: N}).map(function(value, index){\n  return index + 1;\n});\n```\nand **Solution 2**:\n```js\nArray.from(new Array(N),(val,index)=>index+1);\n"},"2016-01-15-even-simpler-way-of-using-indexof-as-a-contains-clause.md":{"name":"2016-01-15-even-simpler-way-of-using-indexof-as-a-contains-clause.md","sha":"c8f8ab79026428ae1952fbb111b7ed16c2a86d90","content":"---\nlayout: post\n\ntitle: Even simpler way of using `indexOf` as a contains clause\ntip-number: 15\ntip-username: jhogoforbroke\ntip-username-profile: https://twitter.com/jhogoforbroke\ntip-tldr: JavaScript by default does not have a contains method. And for checking existence of a substring in a string or an item in an array you may do this.\n\ncategories:\n    - en\n---\n\nJavaScript by default does not have a contains method. And for checking existence of a substring in a string or an item in an array you may do this:\n\n```javascript\nvar someText = 'javascript rules';\nif (someText.indexOf('javascript') !== -1) {\n}\n\n// or\nif (someText.indexOf('javascript') >= 0) {\n}\n```\n\nBut let's look at these [Expressjs](https://github.com/strongloop/express) code snippets.\n\n[examples/mvc/lib/boot.js](https://github.com/strongloop/express/blob/2f8ac6726fa20ab5b4a05c112c886752868ac8ce/examples/mvc/lib/boot.js#L26)\n\n\n```javascript\nfor (var key in obj) {\n  // \"reserved\" exports\n  if (~['name', 'prefix', 'engine', 'before'].indexOf(key)) continue;\n```\n\n[lib/utils.js](https://github.com/strongloop/express/blob/2f8ac6726fa20ab5b4a05c112c886752868ac8ce/lib/utils.js#L93)\n\n\n```javascript\nexports.normalizeType = function(type){\n  return ~type.indexOf('/')\n    ? acceptParams(type)\n    : { value: mime.lookup(type), params: {} };\n};\n```\n\n[examples/web-service/index.js](https://github.com/strongloop/express/blob/2f8ac6726fa20ab5b4a05c112c886752868ac8ce/examples/web-service/index.js#L35)\n\n\n```javascript\n// key is invalid\nif (!~apiKeys.indexOf(key)) return next(error(401, 'invalid api key'));\n```\n\nThe gotcha is the [bitwise operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators) **~**, \"Bitwise operators perform their operations on binary representations, but they return standard JavaScript numerical values.\"\n\nIt transforms `-1` into `0`, and `0` evaluates to `false` in JavaScript:\n\n```javascript\nvar someText = 'text';\n!!~someText.indexOf('tex'); // someText contains \"tex\" - true\n!~someText.indexOf('tex'); // someText NOT contains \"tex\" - false\n~someText.indexOf('asd'); // someText doesn't contain \"asd\" - false\n~someText.indexOf('ext'); // someText contains \"ext\" - true\n```\n\n### String.prototype.includes()\n\nES6 introduced the [includes() method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes) and you can use it to determine whether or not a string includes another string:\n\n```javascript\n'something'.includes('thing'); // true\n```\n\nWith ECMAScript 2016 (ES7) it is even possible to use these techniques with Arrays:\n\n```javascript\n!!~[1, 2, 3].indexOf(1); // true\n[1, 2, 3].includes(1); // true\n```\n\n**Unfortunately, it is only supported in Chrome, Firefox, Safari 9 or above and Edge; not IE11 or lower.**\n**It's better used in controlled environments.**"},"2016-02-13-know-the-passing-mechanism.md":{"name":"2016-02-13-know-the-passing-mechanism.md","sha":"39d1763d1ad7ae563677a1da1dc7c39dfcecc273","content":"---\nlayout: post\n\ntitle: Know the passing mechanism\ntip-number: 44\ntip-username: bmkmanoj\ntip-username-profile: https://github.com/bmkmanoj\ntip-tldr: JavaScript technically only passes by value for both primitives and object (or reference) types. In case of reference types the reference value itself is passed by value.\n\ncategories:\n    - en\n---\n\nJavaScript is pass-by-value, technically. It is neither pass-by-value nor pass-by-reference, going by the truest sense of these terms. To understand this passing mechanism, take a look at the following two example code snippets and the explanations.\n\n### Example 1\n\n```js\n\nvar me = {\t\t\t\t\t// 1\n\t'partOf' : 'A Team'\n}; \n\nfunction myTeam(me) {\t\t// 2\n\n\tme = {\t\t\t\t\t// 3\n\t\t'belongsTo' : 'A Group'\n\t}; \n} \t\n\nmyTeam(me);\t\t\nconsole.log(me);\t\t\t// 4  : {'partOf' : 'A Team'}\n\n```\n\nIn above example, when the `myTeam` gets invoked, JavaScript is *passing the reference to* `me` *object as value, as it is an object* and invocation itself creates two independent references to the same object, (though the name being same here i.e. `me`, is misleading and gives us an impression that it is the single reference) and hence, the reference variable themselves are independent.\n\nWhen we assigned a new object at #`3`, we are changing this reference value entirely within the `myTeam` function, and it will not have any impact on the original object outside this function scope, from where it was passed and the reference in the outside scope is going to retain the original object and hence the output from #`4`. \n\n\n### Example 2\n\n```js\n\nvar me = {\t\t\t\t\t// 1\n\t'partOf' : 'A Team'\n}; \n\nfunction myGroup(me) { \t\t// 2\n\tme.partOf = 'A Group';  // 3\n} \n\nmyGroup(me);\nconsole.log(me);\t\t\t// 4  : {'partOf' : 'A Group'}\n\t\n```\n\nIn the case of `myGroup` invocation, we are passing the object `me`. But unlike the example 1 scenario, we are not assigning this `me` variable to any new object, effectively meaning the object reference value within the `myGroup` function scope still is the original object's reference value and when we are modifying the property within this scope, it is effectively modifying the original object's property. Hence, you get the output from #`7`.\n\nSo does this later case not prove that javascript is pass-by-reference? No, it does not. Remember, *JavaScript passes the reference as value, in case of objects*. The confusion arises as we tend not to understand fully what pass by reference is. This is the exact reason, some prefer to call this as *call-by-sharing*.\n\n\n*Initially posted by the author on [js-by-examples](https://github.com/bmkmanoj/js-by-examples/blob/master/examples/js_pass_by_value_or_reference.md)*\n"},"2016-02-09-using-json-stringify.md":{"name":"2016-02-09-using-json-stringify.md","sha":"df85a66ae6d74fae5a58158c3d10b7905547bb0a","content":"---\nlayout: post\n\ntitle: Using JSON.Stringify\ntip-number: 40\ntip-username: vamshisuram\ntip-username-profile: https://github.com/vamshisuram\ntip-tldr: Create string from selected properties of JSON object.\n\n\ncategories:\n    - en\n---\n\nLet's say there is an object with properties \"prop1\", \"prop2\", \"prop3\".\nWe can pass __additional params__ to __JSON.stringify__ to selectively write properties of the object to string like:\n\n```javascript\nvar obj = {\n    'prop1': 'value1',\n    'prop2': 'value2',\n    'prop3': 'value3'\n};\n\nvar selectedProperties = ['prop1', 'prop2'];\n\nvar str = JSON.stringify(obj, selectedProperties);\n\n// str\n// {\"prop1\":\"value1\",\"prop2\":\"value2\"}\n\n```\n\nThe __\"str\"__ will contain only info on selected properties only.\n\nInstead of array we can pass a function also.\n\n```javascript\n\nfunction selectedProperties(key, val) {\n    // the first val will be the entire object, key is empty string\n    if (!key) {\n        return val;\n    }\n\n    if (key === 'prop1' || key === 'prop2') {\n        return val;\n    }\n\n    return;\n}\n```\n\nThe last optional param it takes is to modify the way it writes the object to string.\n\n```javascript\nvar str = JSON.stringify(obj, selectedProperties, '\\t\\t');\n\n/* str output with double tabs in every line.\n{\n        \"prop1\": \"value1\",\n        \"prop2\": \"value2\"\n}\n*/\n\n```\n\n"},"2016-01-22-two-ways-to-empty-an-array.md":{"name":"2016-01-22-two-ways-to-empty-an-array.md","sha":"045edbda8eff051367d4d40ba846dfbdf39f47b8","content":"---\nlayout: post\n\ntitle: Two ways to empty an array\ntip-number: 22\ntip-username: microlv\ntip-username-profile: https://github.com/microlv\ntip-tldr: In JavaScript when you want to empty an array, there are a lot ways, but this is the most performant.\n\ncategories:\n    - en\n---\n\nYou define an array and want to empty its contents.\nUsually, you would do it like this:\n\n```javascript\n// define Array\nvar list = [1, 2, 3, 4];\nfunction empty() {\n    //empty your array\n    list = [];\n}\nempty();\n```\nBut there is another way to empty an array that is more performant.\n\nYou should use code like this:\n\n```javascript\nvar list = [1, 2, 3, 4];\nfunction empty() {\n    //empty your array\n    list.length = 0;\n}\nempty();\n```\n\n* `list = []` assigns a reference to a new array to a variable, while any other references are unaffected.\nwhich means that references to the contents of the previous array are still kept in memory, leading to memory leaks.\n\n* `list.length = 0` deletes everything in the array, which does hit other references.\n\nIn other words, if you have two references to the same array (`a = [1,2,3]; a2 = a;`), and you delete the array's contents using `list.length = 0`, both references (a and a2) will now point to the same empty array. (So don't use this technique if you don't want a2 to hold an empty array!)\n\nThink about what this will output:\n\n```js\nvar foo = [1,2,3];\nvar bar = [1,2,3];\nvar foo2 = foo;\nvar bar2 = bar;\nfoo = [];\nbar.length = 0;\nconsole.log(foo, bar, foo2, bar2);\n\n// [] [] [1, 2, 3] []\n```\n\nStackoverflow more detail:\n[difference-between-array-length-0-and-array](http://stackoverflow.com/questions/4804235/difference-between-array-length-0-and-array)\n"},"2016-01-02-keys-in-children-components-are-important.md":{"name":"2016-01-02-keys-in-children-components-are-important.md","sha":"4a1f5866f16bfa51160ffc11223087c70b57531a","content":"---\nlayout: post\n\ntitle: Keys in children components are important\ntip-number: 02\ntip-username: loverajoel \ntip-username-profile: https://github.com/loverajoel\ntip-tldr: The key is an attribute that you must pass to all components created dynamically from an array. It's a unique and constant id that React uses to identify each component in the DOM and to know whether it's a different component or the same one. Using keys ensures that the child component is preserved and not recreated and prevents weird things from happening.\n\ncategories:\n    - en\n---\n\nThe [key](https://facebook.github.io/react/docs/multiple-components.html#dynamic-children) is an attribute that you must pass to all components created dynamically from an array. It's a unique and constant id that React uses to identify each component in the DOM and to know whether it's a different component or the same one. Using keys ensures that the child component is preserved and not recreated and prevents weird things from happening.\n\n> Key is not really about performance, it's more about identity (which in turn leads to better performance). Randomly assigned and changing values do not form an identity [Paul O’Shannessy](https://github.com/facebook/react/issues/1342#issuecomment-39230939)\n\n- Use an existing unique value of the object.\n- Define the keys in the parent components, not in child components\n\n```javascript\n//bad\n...\nrender() {\n\t<div key={{item.key}}>{{item.name}}</div>\n}\n...\n\n//good\n<MyComponent key={{item.key}}/>\n```\n- [Using array index is a bad practice.](https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318#.76co046o9)\n- `random()` will not work\n\n```javascript\n//bad\n<MyComponent key={{Math.random()}}/>\n```\n\n- You can create your own unique id. Be sure that the method is fast and attach it to your object.\n- When the number of children is large or contains expensive components, use keys to improve performance.\n- [You must provide the key attribute for all children of ReactCSSTransitionGroup.](http://docs.reactjs-china.com/react/docs/animation.html)"},"2016-01-27-short-circuit-evaluation-in-js.md":{"name":"2016-01-27-short-circuit-evaluation-in-js.md","sha":"40d55e0357156efa643f0b1db62f407c013aaa14","content":"---\nlayout: post\n\ntitle: Short circuit evaluation in JS.\ntip-number: 27\ntip-username: bhaskarmelkani\ntip-username-profile: https://www.twitter.com/bhaskarmelkani\ntip-tldr: Short-circuit evaluation says, the second argument is executed or evaluated only if the first argument does not suffice to determine the value of the expression, when the first argument of the AND `&&` function evaluates to false, the overall value must be false, and when the first argument of the OR `||` function evaluates to true, the overall value must be true.\n\ncategories:\n    - en\n---\n\n[Short-circuit evaluation](https://en.wikipedia.org/wiki/Short-circuit_evaluation) says, the second argument is executed or evaluated only if the first argument does not suffice to determine the value of the expression: when the first argument of the AND (`&&`) function evaluates to false, the overall value must be false; and when the first argument of the OR (`||`) function evaluates to true, the overall value must be true.\n\nFor the following `test` condition and `isTrue` and `isFalse` function.\n\n```js\nvar test = true;\nvar isTrue = function(){\n  console.log('Test is true.');\n};\nvar isFalse = function(){\n  console.log('Test is false.');\n};\n\n```\nUsing logical AND - `&&`.\n\n```js\n// A normal if statement.\nif(test){\n  isTrue();    // Test is true\n}\n\n// Above can be done using '&&' as -\n\n( test && isTrue() );  // Test is true\n```\nUsing logical OR - `||`.\n\n```js\ntest = false;\nif(!test){\n  isFalse();    // Test is false.\n}\n\n( test || isFalse());  // Test is false.\n```\nThe logical OR could also be used to set a default value for function argument.\n\n```js\nfunction theSameOldFoo(name){ \n  name = name || 'Bar' ;\n  console.log(\"My best friend's name is \" + name);\n}\ntheSameOldFoo();  // My best friend's name is Bar\ntheSameOldFoo('Bhaskar');  // My best friend's name is Bhaskar\n```\nThe logical AND could be used to avoid exceptions when using properties of undefined.\nExample:\n\n```js\nvar dog = { \n  bark: function(){\n    console.log('Woof Woof');\n  }\n};\n\n// Calling dog.bark();\ndog.bark(); // Woof Woof.\n\n// But if dog is not defined, dog.bark() will raise an error \"Cannot read property 'bark' of undefined.\"\n// To prevent this, we can use &&.\n\ndog&&dog.bark();   // This will only call dog.bark(), if dog is defined.\n\n```\n"},"2016-01-26-filtering-and-sorting-a-list-of-strings.md":{"name":"2016-01-26-filtering-and-sorting-a-list-of-strings.md","sha":"946f47939e2e57285e248fb1c7ddf5f15580e79c","content":"---\nlayout: post\n\ntitle: Filtering and Sorting a List of Strings\ntip-number: 26\ntip-username: davegomez\ntip-username-profile: https://github.com/davegomez\ntip-tldr: You may have a big list of names you need to filter in order to remove duplicates and sort them alphabetically.\n\ncategories:\n    - en\n---\n\nYou may have a big list of names you need to filter in order to remove duplicates and sort them alphabetically.\n\nIn our example we are going to use the list of **JavaScript reserved keywords** we can find across the different versions of the language, but as you can notice, there is a lot of duplicated keywords and they are not alphabetically organized. So this is a perfect list ([Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)) of strings to test out this JavaScript tip.\n\n```js\nvar keywords = ['do', 'if', 'in', 'for', 'new', 'try', 'var', 'case', 'else', 'enum', 'null', 'this', 'true', 'void', 'with', 'break', 'catch', 'class', 'const', 'false', 'super', 'throw', 'while', 'delete', 'export', 'import', 'return', 'switch', 'typeof', 'default', 'extends', 'finally', 'continue', 'debugger', 'function', 'do', 'if', 'in', 'for', 'int', 'new', 'try', 'var', 'byte', 'case', 'char', 'else', 'enum', 'goto', 'long', 'null', 'this', 'true', 'void', 'with', 'break', 'catch', 'class', 'const', 'false', 'final', 'float', 'short', 'super', 'throw', 'while', 'delete', 'double', 'export', 'import', 'native', 'public', 'return', 'static', 'switch', 'throws', 'typeof', 'boolean', 'default', 'extends', 'finally', 'package', 'private', 'abstract', 'continue', 'debugger', 'function', 'volatile', 'interface', 'protected', 'transient', 'implements', 'instanceof', 'synchronized', 'do', 'if', 'in', 'for', 'let', 'new', 'try', 'var', 'case', 'else', 'enum', 'eval', 'null', 'this', 'true', 'void', 'with', 'break', 'catch', 'class', 'const', 'false', 'super', 'throw', 'while', 'yield', 'delete', 'export', 'import', 'public', 'return', 'static', 'switch', 'typeof', 'default', 'extends', 'finally', 'package', 'private', 'continue', 'debugger', 'function', 'arguments', 'interface', 'protected', 'implements', 'instanceof', 'do', 'if', 'in', 'for', 'let', 'new', 'try', 'var', 'case', 'else', 'enum', 'eval', 'null', 'this', 'true', 'void', 'with', 'await', 'break', 'catch', 'class', 'const', 'false', 'super', 'throw', 'while', 'yield', 'delete', 'export', 'import', 'public', 'return', 'static', 'switch', 'typeof', 'default', 'extends', 'finally', 'package', 'private', 'continue', 'debugger', 'function', 'arguments', 'interface', 'protected', 'implements', 'instanceof'];\n```\n\nSince we don't want to change our original list, we are going to use a high order function named [`filter`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/filter), which will return a new filter array based in a predicate (*function*) we pass to it. The predicate will compare the index of the current keyword in the original list with its `index` in the new list and will push it to the new array only if the indexes match.\n\nFinally we are going to sort the filtered list using the [`sort`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) function which takes a comparison function as the only argument, returning a alphabetically sorted list.\n\n```js\nvar filteredAndSortedKeywords = keywords\n  .filter(function (keyword, index) {\n      return keywords.lastIndexOf(keyword) === index;\n    })\n  .sort(function (a, b) {\n      return a < b ? -1 : 1;\n    });\n```\n\nThe **ES6** (ECMAScript 2015) version using [arrow functions](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions) looks a little simpler:\n\n```js\nconst filteredAndSortedKeywords = keywords\n  .filter((keyword, index) => keywords.lastIndexOf(keyword) === index)\n  .sort((a, b) => a < b ? -1 : 1);\n```\n\nAnd this is the final filtered and sorted list of JavaScript reserved keywords:\n\n```js\nconsole.log(filteredAndSortedKeywords);\n\n// ['abstract', 'arguments', 'await', 'boolean', 'break', 'byte', 'case', 'catch', 'char', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'double', 'else', 'enum', 'eval', 'export', 'extends', 'false', 'final', 'finally', 'float', 'for', 'function', 'goto', 'if', 'implements', 'import', 'in', 'instanceof', 'int', 'interface', 'let', 'long', 'native', 'new', 'null', 'package', 'private', 'protected', 'public', 'return', 'short', 'static', 'super', 'switch', 'synchronized', 'this', 'throw', 'throws', 'transient', 'true', 'try', 'typeof', 'var', 'void', 'volatile', 'while', 'with', 'yield']\n```\n\n*Thanks to [@nikshulipa](https://github.com/nikshulipa), [@kirilloid](https://twitter.com/kirilloid), [@lesterzone](https://twitter.com/lesterzone), [@tracker1](https://twitter.com/tracker1), [@manuel_del_pozo](https://twitter.com/manuel_del_pozo) for all the comments and suggestions!*\n"},"2016-02-14-calculate-the-max-min-value-from-an-array.md":{"name":"2016-02-14-calculate-the-max-min-value-from-an-array.md","sha":"f0920aca2ba00552055ffe556a995af8b7466364","content":"---\nlayout: post\n\ntitle: Calculate the Max/Min value from an array\ntip-number: 45\ntip-username: loverajoel\ntip-username-profile: https://www.twitter.com/loverajoel\ntip-tldr: Ways to use the built-in functions Math.max() and Math.min() with arrays of numbers\n\ncategories:\n    - en\n---\n\nThe built-in functions [Math.max()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max) and [Math.min()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min) find the maximum and minimum value of the arguments, respectively.\n\n```js\nMath.max(1, 2, 3, 4); // 4\nMath.min(1, 2, 3, 4); // 1\n```\n\nThese functions will not work as-is with arrays of numbers. However, there are some ways around this.\n\n[`Function.prototype.apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply) allows you to call a function with a given `this` value and an _array_ of arguments.\n\n```js\nvar numbers = [1, 2, 3, 4];\nMath.max.apply(null, numbers) // 4\nMath.min.apply(null, numbers) // 1\n```\n\nPassing the `numbers` array as the second argument of `apply()` results in the function being called with all values in the array as parameters.\n\nA simpler, ES2015 way of accomplishing this is with the new [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).\n\n```js\nvar numbers = [1, 2, 3, 4];\nMath.max(...numbers) // 4\nMath.min(...numbers) // 1\n```\n\nThis operator causes the values in the array to be expanded, or \"spread\", into the function's arguments.\n"},"2016-01-05-differences-between-undefined-and-null.md":{"name":"2016-01-05-differences-between-undefined-and-null.md","sha":"000c63604289125348863d024317b9e99c13c4d7","content":"---\nlayout: post\n\ntitle: Differences between `undefined` and `null`\ntip-number: 05\ntip-username: loverajoel \ntip-username-profile: https://github.com/loverajoel\ntip-tldr: Understanding the differences between `undefined` and `null`.\n\ncategories:\n    - en\n---\n\n- `undefined` means a variable has not been declared, or has been declared but has not yet been assigned a value\n- `null` is an assignment value that means \"no value\"\n- Javascript sets unassigned variables with a default value of `undefined`\n- Javascript never sets a value to `null`. It is used by programmers to indicate that a `var` has no value.\n- `undefined` is not valid in JSON while `null` is\n- `undefined` typeof is `undefined`\n- `null` typeof is an `object`. [Why?](http://www.2ality.com/2013/10/typeof-null.html)\n- Both are primitives\n- Both are [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy)\n  (`Boolean(undefined) // false`, `Boolean(null) // false`)\n- You can know if a variable is [undefined](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined)\n\n  ```javascript\n  typeof variable === \"undefined\"\n```\n- You can check if a variable is [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null)\n\n  ```javascript\n  variable === null\n```\n- The **equality** operator considers them equal, but the **identity** doesn't\n\n  ```javascript\n  null == undefined // true\n\n  null === undefined // false\n```"},"2016-02-15-detect-document-ready-in-pure-js.md":{"name":"2016-02-15-detect-document-ready-in-pure-js.md","sha":"2fb38647ac7d11665f5e69faff7b16558bf54d77","content":"---\nlayout: post\n\ntitle: Detect document ready in pure JS\ntip-number: 46\ntip-username: loverajoel\ntip-username-profile: https://www.twitter.com/loverajoel\ntip-tldr: The cross-browser way to check if the document has loaded in pure JavaScript\n\ncategories:\n    - en\n---\n\nThe cross-browser way to check if the document has loaded in pure JavaScript is using [`readyState`](https://developer.mozilla.org/en-US/docs/Web/API/Document/readyState).\n\n```js\nif (document.readyState === 'complete') {\n  // The page is fully loaded\n}\n```\n\nYou can detect when the document is ready...\n\n\n```js\nlet stateCheck = setInterval(() => {\n  if (document.readyState === 'complete') {\n    clearInterval(stateCheck);\n    // document ready\n  }\n}, 100);\n```\n\nor with [onreadystatechange](https://developer.mozilla.org/en-US/docs/Web/Events/readystatechange)...\n\n\n```js\ndocument.onreadystatechange = () => {\n  if (document.readyState === 'complete') {\n    // document ready\n  }\n};\n```\n\nUse `document.readyState === 'interactive'` to detect when the DOM is ready.\n"},"2016-02-05-observe-dom-changes.md":{"name":"2016-02-05-observe-dom-changes.md","sha":"cbb575b669c2aaf70dec69d82fce699e4d57471b","content":"---\nlayout: post\n\ntitle: Observe DOM changes in extensions\ntip-number: 36\ntip-username: beyondns\ntip-username-profile: https://github.com/beyondns\ntip-tldr: When you develop extensions to existent sites it's not so easy to play with DOM 'cause of modern dynamic javascript.\n\n\ncategories:\n    - en\n---\n[MutationObserver](https://developer.mozilla.org/en/docs/Web/API/MutationObserver) is a solution to listen DOM changes and do what you want to do with elements when they changed. In following example there is some emulation of dynamic content loading with help of timers, after first \"target\" element creation goes \"subTarget\".\nIn extension code firstly rootObserver works till targetElement appearance then elementObserver starts. This cascading observing helps finally get moment when subTargetElement found.\nThis useful to develop extensions to complex sites with dynamic content loading.\n\n```js\nconst observeConfig = {\n    attributes: true,\n    childList: true,\n    characterData: true,\n    subtree: true\n};\n\nfunction initExtension(rootElement, targetSelector, subTargetSelector) {\n    var rootObserver = new MutationObserver(function(mutations) {\n        console.log(\"Inside root observer\");\n        targetElement = rootElement.querySelector(targetSelector);\n        if (targetElement) {\n            rootObserver.disconnect();\n            var elementObserver = new MutationObserver(function(mutations) {\n                console.log(\"Inside element observer\")\n                subTargetElement = targetElement.querySelector(subTargetSelector);\n                if (subTargetElement) {\n                    elementObserver.disconnect();\n                    console.log(\"subTargetElement found!\")\n                }\n            })\n            elementObserver.observe(targetElement, observeConfig);\n        }\n    })\n    rootObserver.observe(rootElement, observeConfig);\n}\n\n(function() {\n\n    initExtension(document.body, \"div.target\", \"div.subtarget\")\n\n    setTimeout(function() {\n        del = document.createElement(\"div\");\n        del.innerHTML = \"<div class='target'>target</div>\"\n        document.body.appendChild(del)\n    }, 3000);\n\n\n    setTimeout(function() {\n        var el = document.body.querySelector('div.target')\n        if (el) {\n            del = document.createElement(\"div\");\n            del.innerHTML = \"<div class='subtarget'>subtarget</div>\"\n            el.appendChild(del)\n        }\n    }, 5000);\n\n})()\n```\n\n"},"2016-02-11-preventing-unapply-attacks.md":{"name":"2016-02-11-preventing-unapply-attacks.md","sha":"1c3ee38e086bb0ccd492192a2175f64a9279062c","content":"---\nlayout: post\n\ntitle: Preventing Unapply Attacks\ntip-number: 42\ntip-username: emars \ntip-username-profile: https://twitter.com/marseltov\ntip-tldr: Freeze the builtin prototypes.\n\ncategories:\n    - en\n---\n\nBy overriding the builtin prototypes, external code can cause code to break by rewriting code to expose and change bound arguments. This can be an issue that seriously breaks applications that works by using polyfill es5 methods.\n\n```js\n// example bind polyfill\nfunction bind(fn) {\n  var prev = Array.prototype.slice.call(arguments, 1);\n  return function bound() {\n    var curr = Array.prototype.slice.call(arguments, 0);\n    var args = Array.prototype.concat.apply(prev, curr);\n    return fn.apply(null, args);\n  };\n}\n\n\n// unapply-attack\nfunction unapplyAttack() {\n  var concat = Array.prototype.concat;\n  Array.prototype.concat = function replaceAll() {\n    Array.prototype.concat = concat; // restore the correct version\n    var curr = Array.prototype.slice.call(arguments, 0);\n    var result = concat.apply([], curr);\n    return result;\n  };\n}\n```\n\nThe above function discards the `prev` array from the bind meaning that any `.concat` the first concat call following using the unapply attack will throw an error.\n\nBy using [Object.freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze), making an object immutable, you prevent any overriding of the builtin object prototypes. \n\n\n```js\n(function freezePrototypes() {\n  if (typeof Object.freeze !== 'function') {\n    throw new Error('Missing Object.freeze');\n  }\n  Object.freeze(Object.prototype);\n  Object.freeze(Array.prototype);\n  Object.freeze(Function.prototype);\n}());\n```\n\nYou can read more about unapply attacks [here](https://glebbahmutov.com/blog/unapply-attack/).\nAlthough this concept is called an 'unapply attack' due to some code being able to access closures that normally wouldn't be in scope, it is mostly wrong to consider this a security feature due to it not preventing an attacker with code execution from extending prototypes before the freezing happens and also still having the potential to read all scopes using various language features. ECMA modules would give realm based isolation which is much stronger than this solution however still doesn't fix the issues of third party scripts.\n"},"2016-01-07-use-strict-and-get-lazy.md":{"name":"2016-01-07-use-strict-and-get-lazy.md","sha":"7f61188cfb8084ec232f4c7fd806eafa6891f25e","content":"---\nlayout: post\n\ntitle: use strict and get lazy\ntip-number: 07\ntip-username: nainslie\ntip-username-profile: https://twitter.com/nat5an\ntip-tldr: Strict-mode JavaScript makes it easier for the developer to write \"secure\" JavaScript.\n\ncategories:\n    - en\n---\n\nStrict-mode JavaScript makes it easier for the developer to write \"secure\" JavaScript.\n\nBy default, JavaScript allows the programmer to be pretty careless, for example, by not requiring us to declare our variables with \"var\" when we first introduce them.  While this may seem like a convenience to the unseasoned developer, it's also the source of many errors when a variable name is misspelled or accidentally referred to out of its scope.\n\nProgrammers like to make the computer do the boring stuff for us, and automatically check our work for mistakes. That's what the JavaScript \"use strict\" directive allows us to do, by turning our mistakes into JavaScript errors.\n\nWe add this directive either by adding it at the top of a js file:\n\n```javascript\n// Whole-script strict mode syntax\n\"use strict\";\nvar v = \"Hi!  I'm a strict mode script!\";\n```\n\nor inside a function:\n\n```javascript\nfunction f()\n{\n  // Function-level strict mode syntax\n  'use strict';\n  function nested() { return \"And so am I!\"; }\n  return \"Hi!  I'm a strict mode function!  \" + nested();\n}\nfunction f2() { return \"I'm not strict.\"; }\n```\n\nBy including this directive in a JavaScript file or function, we will direct the JavaScript engine to execute in strict mode which disables a bunch of behaviors that are usually undesirable in larger JavaScript projects.  Among other things, strict mode changes the following behaviors:\n\n* Variables can only be introduced when they are preceded with \"var\"\n* Attempting to write to read-only properties generates a noisy error\n* You have to call constructors with the \"new\" keyword\n* \"this\" is not implicitly bound to the global object\n* Very limited use of eval() allowed\n* Protects you from using reserved words or future reserved words as variable names\n\nStrict mode is great for new projects, but can be challenging to introduce into older projects that don't already use it in most places.  It also can be problematic if your build chain concatenates all your js files into one big file, as this may cause all files to execute in strict mode.\n\nIt is not a statement, but a literal expression, ignored by earlier versions of JavaScript.\nStrict mode is supported in:\n\n* Internet Explorer from version 10.\n* Firefox from version 4.\n* Chrome from version 13.\n* Safari from version 5.1.\n* Opera from version 12.\n\n[See MDN for a fuller description of strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)."},"2016-01-01-angularjs-digest-vs-apply.md":{"name":"2016-01-01-angularjs-digest-vs-apply.md","sha":"14d51a09f54a5e5440fd4898a8b0bca2c83a6934","content":"---\nlayout: post\n\ntitle: AngularJs - `$digest` vs `$apply`\ntip-number: 01\ntip-username: loverajoel \ntip-username-profile: https://github.com/loverajoel\ntip-tldr: JavaScript modules and build steps are getting more numerous and complicated, but what about boilerplate in new frameworks?\n\ncategories:\n    - en\n---\n\nOne of the most appreciated features of AngularJs is the two-way data binding. In order to make this work AngularJs evaluates the changes between the model and the view through cycles(`$digest`). You need to understand this concept in order to understand how the framework works under the hood.\n\nAngular evaluates each watcher whenever one event is fired. This is the known `$digest` cycle.\nSometimes you have to force it to run a new cycle manually and you must choose the correct option because this phase is one of the most influential in terms of performance.\n\n### `$apply`\nThis core method lets you to start the digestion cycle explicitly. That means that all watchers are checked; the entire application starts the `$digest loop`. Internally, after executing an optional function parameter, it calls `$rootScope.$digest();`.\n\n### `$digest`\nIn this case the `$digest` method starts the `$digest` cycle for the current scope and its children. You should notice that the parent's scopes will not be checked.\n and not be affected.\n\n### Recommendations\n- Use `$apply` or `$digest` only when browser DOM events have triggered outside of AngularJS.\n- Pass a function expression to `$apply`, this has an error handling mechanism and allows integrating changes in the digest cycle.\n\n```javascript\n$scope.$apply(() => {\n\t$scope.tip = 'Javascript Tip';\n});\n```\n\n- If you only need to update the current scope or its children, use `$digest`, and prevent a new digest cycle for the whole application. The performance benefit is self-evident.\n- `$apply()` is a hard process for the machine and can lead to performance issues when there is a lot of binding.\n- If you are using >AngularJS 1.2.X, use `$evalAsync`, which is a core method that will evaluate the expression during the current cycle or the next. This can improve your application's performance"},"2016-02-07-flattening-multidimensional-arrays-in-javascript.md":{"name":"2016-02-07-flattening-multidimensional-arrays-in-javascript.md","sha":"40f9bd781bec5310413255feedfe199785af1295","content":"---\nlayout: post\n\ntitle: Flattening multidimensional Arrays in JavaScript\ntip-number: 38\ntip-username: loverajoel\ntip-username-profile: https://www.twitter.com/loverajoel\ntip-tldr: Three different solutions to merge multidimensional array into a single array.\n\n\ncategories:\n    - en\n---\n\nThese are the three known ways to merge multidimensional array into a single array.\n\nGiven this array:\n\n```js\nvar myArray = [[1, 2],[3, 4, 5], [6, 7, 8, 9]];\n```\n\nWe wanna have this result:\n\n```js\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### Solution 1: Using [`concat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) and [`apply()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)\n\n```js\nvar myNewArray = [].concat.apply([], myArray);\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### Solution 2: Using [`reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Flatten_an_array_of_arrays)\n\n```js\nvar myNewArray = myArray.reduce(function(prev, curr) {\n  return prev.concat(curr);\n});\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### Solution 3:\n\n```js\nvar myNewArray3 = [];\nfor (var i = 0; i < myArray.length; ++i) {\n  for (var j = 0; j < myArray[i].length; ++j)\n    myNewArray3.push(myArray[i][j]);\n}\nconsole.log(myNewArray3);\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\nTake a look [here](https://jsbin.com/qeqicu/edit?js,console) these 3 algorithms in action.\n\nFor infinitely nested array try Underscore [flatten()](https://github.com/jashkenas/underscore/blob/master/underscore.js#L501).\n\nIf you are curious about performance, [here](http://jsperf.com/flatten-an-array-loop-vs-reduce/6) a test for check how it works."},"2016-02-10-array-average-and-median.md":{"name":"2016-02-10-array-average-and-median.md","sha":"94a9411defc7070b920787276f59356a17e53eba","content":"---\nlayout: post\n\ntitle: Array average and median\ntip-number: 41\ntip-username: soyuka\ntip-username-profile: https://github.com/soyuka\ntip-tldr: Calculate the average and median from array values\n\n\ncategories:\n    - en\n---\n\nThe following examples will be based on the following array:\n\n```javascript\nlet values = [2, 56, 3, 41, 0, 4, 100, 23];\n```\n\nTo get the average, we have to sum up numbers and then divide by the number of values. Steps are:\n- get the array length\n- sum up values\n- get the average (`sum/length`)\n\n```javascript\nlet values = [2, 56, 3, 41, 0, 4, 100, 23];\nlet sum = values.reduce((previous, current) => current += previous);\nlet avg = sum / values.length;\n// avg = 28\n```\n\nOr:\n\n```javascript\nlet values = [2, 56, 3, 41, 0, 4, 100, 23];\nlet count = values.length;\nvalues = values.reduce((previous, current) => current += previous);\nvalues /= count;\n// avg = 28\n```\n\nNow, to get the median steps are:\n- sort the array\n- get the arethmic mean of the middle values\n\n```javascript\nlet values = [2, 56, 3, 41, 0, 4, 100, 23];\nvalues.sort((a, b) => a - b);\nlet lowMiddle = Math.floor((values.length - 1) / 2);\nlet highMiddle = Math.ceil((values.length - 1) / 2);\nlet median = (values[lowMiddle] + values[highMiddle]) / 2;\n// median = 13,5\n```\n\nWith a bitwise operator:\n\n```javascript\nlet values = [2, 56, 3, 41, 0, 4, 100, 23];\nvalues.sort((a, b) => a - b);\nlet median = (values[(values.length - 1) >> 1] + values[values.length >> 1]) / 2\n// median = 13,5\n```\n"},"2016-01-18-rounding-the-fast-way.md":{"name":"2016-01-18-rounding-the-fast-way.md","sha":"13c99d18ee603660d0b9a3686bbd46ba85509e51","content":"---\nlayout: post\n\ntitle: Truncating the fast (but risky) way\ntip-number: 18\ntip-username: pklinger\ntip-username-profile: https://github.com/pklinger\ntip-tldr: .`~~X` is usually a faster `Math.trunc(X)`, but can also make your code do nasty things.\n\ncategories:\n    - en\n---\n\nThis tip is about performance...with a hidden price tag.\n\nHave you ever come across the [double tilde `~~` operator](http://stackoverflow.com/questions/5971645/what-is-the-double-tilde-operator-in-javascript)? It's also often called the \"double bitwise NOT\" operator. You can often use it as a faster substitute for `Math.trunc()`. Why is that?\n\nOne bitwise shift `~` first truncates `input` to 32 bits, then transforms it into `-(input+1)`. The double bitwise shift therefore transforms the input into `-(-(input + 1)+1)` making it a great tool to round towards zero. For numeric input, it therefore mimics `Math.trunc()`. On failure, `0` is returned, which might come in handy sometimes instead of `Math.trunc()`, which returns `NaN` on failure.\n\n```js\n// single ~\nconsole.log(~1337)    // -1338\n\n// numeric input\nconsole.log(~~47.11)  // -> 47\nconsole.log(~~1.9999) // -> 1\nconsole.log(~~3)      // -> 3\n```\n\nHowever, while `~~` is probably a better performer, experienced programmers often stick with `Math.trunc()` instead. To understand why, here's a clinical view on this operator.\n\n### INDICATIONS\n\n##### When every CPU cycle counts\n`~~` is probably faster than `Math.trunc()` across the board, though you should [test that assumption](https://jsperf.com/jsfvsbitnot/10) on whichever platforms matter to you. Also, you'd generally have to perform millions of such operations to have any visible impact at run time.\n\n##### When code clarity is not a concern\nIf you're trying to confuse others, or get maximum utility from your minifier/uglifier, this is a relatively cheap way to do it.\n\n### CONTRAINDICATIONS\n\n##### When your code needs to be maintained\nCode clarity is of great importance in the long term, whether you work in a team, contribute to public code repos, or fly solo. As [the oft-quoted saying](http://c2.com/cgi/wiki?CodeForTheMaintainer) goes:\n> Always code as if the person who ends up maintaining your code is a violent psychopath who knows where you live.\n\nFor a solo programmer, that psychopath is inevitably \"you in six months\".\n\n##### When you forget that `~~` always rounds to zero\nNewbie programmers may fixate on the cleverness of `~~`, forgetting the significance of \"just drop the fractional portion of this number\". This can easily lead to **fencepost errors** (a.k.a. \"off-by-one\") when transforming floats to array indices or related ordinal values, where a different kind of fractional rounding may actually be called for. (Lack of code clarity usually contributes to this problem.)\n\nFor instance, if you're counting numbers on a \"nearest integer\" basis, you should use `Math.round()` instead of `~~`, but programmer laziness and the impact of **_10 whole characters saved per use_** on human fingers often triumph over cold logic, leading to incorrect results.\n\nIn contrast, the very names of the `Math.xyz()` functions clearly communicate their effect, reducing the probability of accidental errors.\n\n##### When dealing with large-magnitude numbers\nBecause `~` first does a 32-bit conversion, `~~` results in bogus values around &plusmn;2.15 billion. If you don't properly range-check your input, a user could trigger unexpected behavior when the transformed value ends up being a great distance from the original:\n\n```js\na = 2147483647.123  // maximum positive 32-bit integer, plus a bit more\nconsole.log(~~a)    // ->  2147483647     (ok)\na += 10000          // ->  2147493647.123 (ok)\nconsole.log(~~a)    // -> -2147483648     (huh?)\n```\nOne particularly vulnerable area involves dealing with Unix epoch timestamps (measured in seconds from 1 Jan 1970 00:00:00 UTC). A quick way to get such values is:\n\n```js\nepoch_int = ~~(+new Date() / 1000)  // Date() epochs in milliseconds, so we scale accordingly\n```\nHowever, when dealing with timestamps after 19 Jan 2038 03:14:07 UTC (sometimes called the **Y2038 limit**), this breaks horribly:\n\n```js\n// epoch timestamp for 1 Jan 2040 00:00:00.123 UTC\nepoch = +new Date('2040-01-01') / 1000 + 0.123      // ->  2208988800.123\n\n// back to the future!\nepoch_int = ~~epoch                                 // -> -2085978496\nconsole.log(new Date(epoch_int * 1000))             // ->  Wed Nov 25 1903 17:31:44 UTC\n\n// that was fun, now let's get real\nepoch_flr = Math.floor(epoch)                       // ->  2208988800\nconsole.log(new Date(epoch_flr * 1000))             // ->  Sun Jan 01 2040 00:00:00 UTC\n```\n\n##### When the original input wasn't sanitized\nBecause `~~` transforms every non-number into `0`:\n\n```js\nconsole.log(~~[])   // -> 0\nconsole.log(~~NaN)  // -> 0\nconsole.log(~~null) // -> 0\n```\nsome programmers treat it as alternative to proper input validation. However, this can lead to strange logic bugs down the line, since you're no longer distinguishing between invalid inputs and actual `0` values. This is therefore _not_ a recommended practice.\n\n##### When so many people think `~~X == Math.floor(X)`\nMost people who write about \"double bitwise NOT\" incorrectly equate it with `Math.floor()` for some reason. If you can't write about it accurately, odds are good you'll eventually misuse it.\n\nOthers are more careful to mention `Math.floor()` for positive inputs and `Math.ceil()` for negative ones, but that forces you to stop and think about the values you're dealing with. This defeats the purpose of `~~` as a handy no-gotchas shortcut.\n\n### DOSAGE\nAvoid where possible. Use sparingly otherwise.\n\n### ADMINISTRATION\n1. Apply cautiously.\n2. Sanitize values before applying.\n3. Carefully document relevant assumptions about the values being transformed.\n4. Review code to deal with, at minimum:\n   * logic bugs where invalid inputs are instead passed to other code modules as valid `0` values\n   * range errors on transformed inputs\n   * fencepost errors due to incorrect rounding direction\n"},"2016-01-08-converting-a-node-list-to-an-array.md":{"name":"2016-01-08-converting-a-node-list-to-an-array.md","sha":"e3860e8a42a8d54e6a3cbd074b44c22045ec51bf","content":"---\nlayout: post\n\ntitle: Converting a Node List to an Array\ntip-number: 08\ntip-username: Tevko\ntip-username-profile: https://twitter.com/tevko\ntip-tldr: Here's a quick, safe, and reusable way to convert a node list into an array of DOM elements.\n\ncategories:\n    - en\n---\n\nThe `querySelectorAll` method returns an array-like object called a node list. These data structures are referred to as \"Array-like\", because they appear as an array, but can not be used with array methods like `map` and `forEach`. Here's a quick, safe, and reusable way to convert a node list into an array of DOM elements:\n\n```javascript\nconst nodelist = document.querySelectorAll('div');\nconst nodelistToArray = Array.apply(null, nodelist);\n\n//later on ..\n\nnodelistToArray.forEach(...);\nnodelistToArray.map(...);\nnodelistToArray.slice(...);\n\n//etc...\n```\n\nThe `apply` method is used to pass an array of arguments to a function with a given `this` value. [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply) states that `apply` will take an array-like object, which is exactly what `querySelectorAll` returns. Since we don't need to specify a value for `this` in the context of the function, we pass in `null` or `0`. The result is an actual array of DOM elements which contains all of the available array methods.\n\nOr if you are using ES2015 you can use the [spread operator `...`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator)\n\n```js\nconst nodelist = [...document.querySelectorAll('div')]; // returns a real array\n\n//later on ..\n\nnodelist.forEach(...);\nnodelist.map(...);\nnodelist.slice(...);\n\n//etc...\n```"},"2016-02-03-implementing-asynchronous-loops.md":{"name":"2016-02-03-implementing-asynchronous-loops.md","sha":"3d87cc1c02533a15819083a3827faec5fd4efddc","content":"---\nlayout: post\n\ntitle: Implementing asynchronous loop\ntip-number: 34\ntip-username: madmantalking\ntip-username-profile: https://github.com/madmantalking\ntip-tldr: You may run into problems while implementing asynchronous loops. \n\ncategories:\n    - en\n---\n\nLet's try out writing an asynchronous function which prints the value of the loop index every second.\n\n```js\nfor (var i=0; i<5; i++) {\n\tsetTimeout(function(){\n\t\tconsole.log(i); \n\t}, 1000 * (i+1));\n}  \n```\nThe output of the above programs turns out to be\n\n```js\n> 5\n> 5\n> 5\n> 5\n> 5\n```\nSo this definitely doesn't work.\n\n**Reason**\n\nEach timeout refers to the original `i`, not a copy. So the for loop increments `i` until it gets to 5, then the timeouts run and use the current value of `i` (which is 5).\n\nWell , this problem seems easy. An immediate solution that strikes is to cache the loop index in a temporary variable.\n\n```js\nfor (var i=0; i<5; i++) {\n\tvar temp = i;\n \tsetTimeout(function(){\n\t\tconsole.log(temp); \n\t}, 1000 * (i+1));\n}  \n```\nBut again the output of the above programs turns out to be\n\n```js\n> 4\n> 4\n> 4\n> 4\n> 4\n```\n\nSo , that doesn't work either , because blocks don't create a scope and variables initializers are hoisted to the top of the scope. In fact, the previous block is the same as:\n\n```js\nvar temp;\nfor (var i=0; i<5; i++) {\n \ttemp = i;\n\tsetTimeout(function(){\n\t\tconsole.log(temp); \n  \t}, 1000 * (i+1));\n}  \n```\n**Solution**\n\nThere are a few different ways to copy `i`. The most common way is creating a closure by declaring a function and passing `i` as an argument. Here we do this as a self-calling function.\n\n```js\nfor (var i=0; i<5; i++) {\n\t(function(num){\n\t\tsetTimeout(function(){\n\t\t\tconsole.log(num); \n\t\t}, 1000 * (i+1)); \n\t})(i);  \n}  \n```\nIn JavaScript, arguments are passed by value to a function. So primitive types like numbers, dates, and strings are basically copied. If you change them inside the function, it does not affect the outside scope. Objects are special: if the inside function changes a property, the change is reflected in all scopes.\n\nAnother approach for this would be with using `let`. With ES6 the `let` keyword is useful since it's block scoped unlike `var`\n\n```js\nfor (let i=0; i<5; i++) {\n \tsetTimeout(function(){\n\t\tconsole.log(i); \n\t}, 1000 * (i+1));\n}  \n```\n"},"2016-01-24-use_===_instead_of_==.md":{"name":"2016-01-24-use_===_instead_of_==.md","sha":"a1984e549be2d709dab42d3982df8bf3ff23a81e","content":"---\nlayout: post\n\ntitle: Use === instead of ==\ntip-number: 24\ntip-username: bhaskarmelkani\ntip-username-profile: https://www.twitter.com/bhaskarmelkani\ntip-tldr: The `==` (or `!=`) operator performs an automatic type conversion if needed. The `===` (or `!==`) operator will not perform any conversion. It compares the value and the type, which could be considered faster ([jsPref](http://jsperf.com/strictcompare)) than `==`.\n\ncategories:\n    - en\n---\n\nThe `==` (or `!=`) operator performs an automatic type conversion if needed. The `===` (or `!==`) operator will not perform any conversion. It compares the value and the type, which could be considered faster ([jsPref](http://jsperf.com/strictcompare)) than `==`.\n\n```js\n[10] ==  10      // is true\n[10] === 10      // is false\n\n'10' ==  10      // is true\n'10' === 10      // is false\n\n []  ==  0       // is true\n []  === 0       // is false\n\n ''  ==  false   // is true but true == \"a\" is false\n ''  === false   // is false \n\n```\n"},"2016-01-17-nodejs-run-a-module-if-it-is-not-required.md":{"name":"2016-01-17-nodejs-run-a-module-if-it-is-not-required.md","sha":"41a2a8878931ba15f837953a6a370cafab555d36","content":"---\nlayout: post\n\ntitle: Node.js - Run a module if it is not `required`\ntip-number: 17\ntip-username: odsdq\ntip-username-profile: https://twitter.com/odsdq\ntip-tldr: In node, you can tell your program to do two different things depending on whether the code is run from `require('./something.js')` or `node something.js`. This is useful if you want to interact with one of your modules independently.\n\ncategories:\n    - en\n---\n\nIn node, you can tell your program to do two different things depending on whether the code is run from `require('./something.js')` or `node something.js`.  This is useful if you want to interact with one of your modules independently.\n\n```js\nif (!module.parent) {\n    // ran with `node something.js`\n    app.listen(8088, function() {\n        console.log('app listening on port 8088');\n    })\n} else {\n    // used with `require('/.something.js')`\n    module.exports = app;\n}\n```\n\nSee [the documentation for modules](https://nodejs.org/api/modules.html#modules_module_parent) for more info."},"2016-01-29-speed-up-recursive-functions-with-memoization.md":{"name":"2016-01-29-speed-up-recursive-functions-with-memoization.md","sha":"50d23de6df3779f46836d0f62536ea3acf1664ac","content":"---\nlayout: post\n\ntitle: Speed up recursive functions with memoization\ntip-number: 29\ntip-username: hingsir\ntip-username-profile: https://github.com/hingsir\ntip-tldr: Fibonacci sequence is very familiar to everybody. we can write the following function in 20 seconds.it works, but not efficient. it did lots of duplicate computing works, we can cache its previously computed results to speed it up.\n\n\ncategories:\n    - en\n---\n\nFibonacci sequence is very familiar to everybody. we can write the following function in 20 seconds.\n\n```js\nvar fibonacci = function(n){\n    return n < 2 ? n : fibonacci(n-1) + fibonacci(n-2);\n}\n```\nit works, but not efficient. it did lots of duplicate computing works, we can cache its previously computed results to speed it up.\n\n```js\nvar fibonacci = (function() {\n  var cache = [0, 1]; // cache the value at the n index\n  return function(n) {\n    if (cache[n] === undefined) {\n      for (var i = cache.length; i <= n; ++i) {\n        cache[i] = cache[i-1] + cache[i-2];\n      }\n    }\n    return cache[n];\n  }\n})()\n```\nAlso, we can define a higher-order function that accepts a function as its argument and returns a memoized version of the function.\n\n```js\nvar memoize = function(func){\n    var cache = {};\n    return function(){\n        var key = Array.prototype.slice.call(arguments).toString();\n        return key in cache ? cache[key] : (cache[key] = func.apply(this,arguments));\n    }\n}\nfibonacci = memoize(fibonacci);\n```\nAnd there is a ES6 version of the memoize function.\n\n```js\nvar memoize = function(func){\n    const cache = {};\n    return (...args) => {\n        const key = [...args].toString();\n        return key in cache ? cache[key] : (cache[key] = func(...args));\n    }\n}\nfibonacci = memoize(fibonacci);\n```\nwe can use `memoize()` in many other situations\n* GCD(Greatest Common Divisor)\n\n```js\nvar gcd = memoize(function(a,b){\n    var t;\n    if (a < b) t=b, b=a, a=t;\n    while(b != 0) t=b, b = a%b, a=t;\n    return a;\n})\ngcd(27,183); //=> 3\n```\n* Factorial calculation\n\n```js\nvar factorial = memoize(function(n) {\n    return (n <= 1) ? 1 : n * factorial(n-1);\n})\nfactorial(5); //=> 120\n```\n"},"2016-02-06-deduplicate-an-array.md":{"name":"2016-02-06-deduplicate-an-array.md","sha":"a985e2e3244cab47f3f9b85071171ae50c09ab37","content":"---\nlayout: post\n\ntitle: Deduplicate an Array\ntip-number: 37\ntip-username: danillouz\ntip-username-profile: https://www.twitter.com/danillouz\ntip-tldr: How to remove duplicate elements, of different data types, from an Array.\n\n\ncategories:\n    - en\n---\n\n# Primitives\nIf an Array only contains primitive values, we can deduplicate it by\nonly using the [`filter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) and [`indexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf) methods.\n\n```javascript\nvar deduped = [ 1, 1, 'a', 'a' ].filter(function (el, i, arr) {\n\treturn arr.indexOf(el) === i;\n});\n\nconsole.log(deduped); // [ 1, 'a' ]\n```\n\n## ES2015\nWe can write this in a more compact way using an [arrow function](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions).\n\n```javascript\nvar deduped = [ 1, 1, 'a', 'a' ].filter( (el, i, arr) => arr.indexOf(el) === i);\n\nconsole.log(deduped); // [ 1, 'a' ]\n```\n\nBut with the introduction of [Sets](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) and the [`from`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from) method, we can achieve the same\nresult in a more concise way.\n\n```javascript\nvar deduped = Array.from( new Set([ 1, 1, 'a', 'a' ]) );\n\nconsole.log(deduped); // [ 1, 'a' ]\n```\n\n# Objects\nWe can't use the same approach when the elements are Objects,\nbecause Objects are stored by reference and primitives are stored\nby value.\n\n```javascript\n1 === 1 // true\n\n'a' === 'a' // true\n\n{ a: 1 } === { a: 1 } // false\n```\n\nTherefore we need to change our approach and use a hash table.\n\n```javascript\nfunction dedup(arr) {\n\tvar hashTable = {};\n\n\treturn arr.filter(function (el) {\n\t\tvar key = JSON.stringify(el);\n\t\tvar match = Boolean(hashTable[key]);\n\n\t\treturn (match ? false : hashTable[key] = true);\n\t});\n}\n\nvar deduped = dedup([\n\t{ a: 1 },\n\t{ a: 1 },\n\t[ 1, 2 ],\n\t[ 1, 2 ]\n]);\n\nconsole.log(deduped); // [ {a: 1}, [1, 2] ]\n```\n\nBecause a hash table in javascript is simply an `Object`, the keys\nwill always be of the type `String`. This means that normally we can't\ndistinguish between strings and numbers of the same value, i.e. `1` and\n`'1'`.\n\n```javascript\nvar hashTable = {};\n\nhashTable[1] = true;\nhashTable['1'] = true;\n\nconsole.log(hashTable); // { '1': true }\n```\n\nHowever, because we're using [`JSON.stringify`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify), keys that are of the\ntype `String`, will be stored as an escaped string value, giving us unique\nkeys in our `hashTable`.\n\n```javascript\nvar hashTable = {};\n\nhashTable[JSON.stringify(1)] = true;\nhashTable[JSON.stringify('1')] = true;\n\nconsole.log(hashTable); // { '1': true, '\\'1\\'': true }\n```\n\nThis means duplicate elements of the same value, but of a different type,\nwill still be deduplicated using the same implementation.\n\n```javascript\nvar deduped = dedup([\n\t{ a: 1 },\n\t{ a: 1 },\n\t[ 1, 2 ],\n\t[ 1, 2 ],\n\t1,\n\t1,\n\t'1',\n\t'1'\n]);\n\nconsole.log(deduped); // [ {a: 1}, [1, 2], 1, '1' ]\n```\n\n# Resources\n## Methods\n* [`filter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n* [`indexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf)\n* [`from`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from)\n* [`JSON.stringify`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify)\n\n## ES2015\n* [arrow functions](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions)\n* [Sets](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set)\n\n## Stack overflow\n* [remove duplicates from array](http://stackoverflow.com/questions/9229645/remove-duplicates-from-javascript-array/9229821#9229821)\n"},"2016-01-12-pseudomandatory-parameters-in-es6-functions.md":{"name":"2016-01-12-pseudomandatory-parameters-in-es6-functions.md","sha":"4021f4bb04f64c76ea7c1848bdd1a72a9de122c5","content":"---\nlayout: post\n\ntitle: Pseudomandatory parameters in ES6 functions\ntip-number: 12\ntip-username: Avraam Mavridis\ntip-username-profile: https://github.com/AvraamMavridis\ntip-tldr: In many programming languages the parameters of a function are by default mandatory and the developer has to explicitly define that a parameter is optional.\n\ncategories:\n    - en\n---\n\nIn many programming languages the parameters of a function are by default mandatory and the developer has to explicitly define that a parameter is optional. In Javascript, every parameter is optional, but we can enforce this behavior without messing with the actual body of a function, taking advantage of [**es6's default values for parameters**] (http://exploringjs.com/es6/ch_parameter-handling.html#sec_parameter-default-values) feature.\n\n```javascript\nconst _err = function( message ){\n  throw new Error( message );\n}\n\nconst getSum = (a = _err('a is not defined'), b = _err('b is not defined')) => a + b\n\ngetSum( 10 ) // throws Error, b is not defined\ngetSum( undefined, 10 ) // throws Error, a is not defined\n ```\n\n `_err` is a function that immediately throws an Error. If no value is passed for one of the parameters, the default value is going to be used, `_err` will be called and an Error will be thrown. You can see more examples for the **default parameters feature** on [Mozilla's Developer Network ](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/default_parameters)"},"2016-02-08-advanced-properties.md":{"name":"2016-02-08-advanced-properties.md","sha":"cdfeb7554e02368eb787f732c6be454f1a45becb","content":"---\nlayout: post\n\ntitle: Advanced Javascript Properties\ntip-number: 39\ntip-username: mallowigi\ntip-username-profile: https://github.com/mallowigi\ntip-tldr: How to add private properties, getters and setters to objects.\n\n\ncategories:\n    - en\n---\n\nIt is possible to configure object properties in Javascript for example to set properties to be pseudo-private or readonly. This feature is available since ECMAScript 5.1, therefore supported by all recent browsers.\n\nTo do so, you need to use the method `defineProperty` of the `Object` prototype like so:\n\n```js\nvar a = {};\nObject.defineProperty(a, 'readonly', {\n  value: 15,\n  writable: false\n});\n\na.readonly = 20;\nconsole.log(a.readonly); // 15\n```\n\nThe syntax is as follows: \n```js\nObject.defineProperty(dest, propName, options)\n```\n\nor for multiple definitions:\n```js\nObject.defineProperties(dest, {\n  propA: optionsA,\n  propB: optionsB, //...\n})\n```\n\nwhere options include the following attributes:\n- *value*: if the property is not a getter (see below), value is a mandatory attribute. `{a: 12}` === `Object.defineProperty(obj, 'a', {value: 12})`\n- *writable*: set the property as readonly. Note that if the property is a nested objects, its properties are still editable.\n- *enumerable*: set the property as hidden. That means that `for ... of` loops and `stringify` will not include the property in their result, but the property is still there. Note: That doesn't mean that the property is private! It can still be accessible from the outside, it just means that it won't be printed.\n- *configurable*: set the property as non modifiable, e.g. protected from deletion or redefinition. Again, if the property is a nested object, its properties are still configurable.\n\n\nSo in order to create a private constant property, you can define it like so:\n\n```js\nObject.defineProperty(obj, 'myPrivateProp', {value: val, enumerable: false, writable: false, configurable: false});\n```\n\nBesides configuring properties, `defineProperty` allows us to define *dynamic properties*, thanks to the second parameter being a string. For instance, let's say that I want to create properties according to some external configuration:\n\n```js\n\nvar obj = {\n  getTypeFromExternal(): true // illegal in ES5.1\n}\n\nObject.defineProperty(obj, getTypeFromExternal(), {value: true}); // ok\n\n// For the example sake, ES6 introduced a new syntax:\nvar obj = {\n  [getTypeFromExternal()]: true\n}\n```\n\nBut that's not all! Advanced properties allows us to create **getters** and **setters**, just like other OOP languages! In that case, one cannot use the `writable`, `enumerable` and `configurable` properties, but instead:\n\n```js\nfunction Foobar () {\n  var _foo; //  true private property\n\n  Object.defineProperty(obj, 'foo', {\n    get: function () { return _foo; }\n    set: function (value) { _foo = value }\n  });\n\n}\n\nvar foobar = new Foobar();\nfoobar.foo; // 15\nfoobar.foo = 20; // _foo = 20\n```\n\nAside for the obvious advantage of encapsulation and advanced accessors, you will notice that we didn't \"call\" the getter, instead we just \"get\" the property without parentheses! This is awesome! For instance, let's imagine that we have an object with long nested properties, like so:\n\n```js\nvar obj = {a: {b: {c: [{d: 10}, {d: 20}] } } };\n```\n\nNow instead of doing `a.b.c[0].d` (where one of the properties can resolve to `undefined` and throw an error), we can instead create an alias:\n\n```js\nObject.defineProperty(obj, 'firstD', {\n  get: function () { return a && a.b && a.b.c && a.b.c[0] && a.b.c[0].d }\n})\n\nconsole.log(obj.firstD) // 10\n```\n\n### Note\nIf you define a getter without a setter and still try to set a value, you will get an error! This is particularly important when using helper functions such as `$.extend` or `_.merge`. Be careful!\n\n### Links\n\n- [defineProperty](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)\n- [Defining properties in JavaScript](http://bdadam.com/blog/defining-properties-in-javascript.html)\n"},"2016-01-21-shuffle-an-array.md":{"name":"2016-01-21-shuffle-an-array.md","sha":"d18d9ef909c4aa75190d258e12192a3a61d1c84a","content":"---\nlayout: post\n\ntitle: Shuffle an Array\ntip-number: 21\ntip-username: 0xmtn\ntip-username-profile: https://github.com/0xmtn/\ntip-tldr: Fisher-Yates Shuffling it's an algorithm to shuffle an array.\n\ncategories:\n    - en\n---\n\n This snippet here uses [Fisher-Yates Shuffling](https://www.wikiwand.com/en/Fisher%E2%80%93Yates_shuffle) Algorithm to shuffle a given array.\n\n```javascript\nfunction shuffle(arr) {\n    var i,\n        j,\n        temp;\n    for (i = arr.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n    return arr;    \n};\n```\nAn example:\n\n```javascript\nvar a = [1, 2, 3, 4, 5, 6, 7, 8];\nvar b = shuffle(a);\nconsole.log(b);\n// [2, 7, 8, 6, 5, 3, 1, 4]\n```"},"2016-01-10-check-if-a-property-is-in-a-object.md":{"name":"2016-01-10-check-if-a-property-is-in-a-object.md","sha":"9ceaca4a32aaa4bdfb6fd67041337e485292d87f","content":"---\nlayout: post\n\ntitle: Check if a property is in a Object\ntip-number: 10\ntip-username: loverajoel\ntip-username-profile: https://www.twitter.com/loverajoel\ntip-tldr: These are ways to check if a property is present in an object.\n\ncategories:\n    - en\n---\n\nWhen you have to check if a property is present in an [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects), you probably are doing something like this:\n\n```javascript\nvar myObject = {\n  name: '@tips_js'\n};\n\nif (myObject.name) { ... }\n\n```\n\nThat's ok, but you have to know that there are two native ways for this kind of thing, the [`in` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) and [`Object.hasOwnProperty`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty). Every object descended from `Object`, has both ways available.\n\n### See the big Difference\n\n```javascript\nvar myObject = {\n  name: '@tips_js'\n};\n\nmyObject.hasOwnProperty('name'); // true\n'name' in myObject; // true\n\nmyObject.hasOwnProperty('valueOf'); // false, valueOf is inherited from the prototype chain\n'valueOf' in myObject; // true\n\n```\n\nBoth differ in the depth at which they check the properties. In other words, `hasOwnProperty` will only return true if key is available on that object directly. However, the `in` operator doesn't discriminate between properties created on an object and properties inherited from the prototype chain.\n\nHere's another example:\n\n```javascript\nvar myFunc = function() {\n  this.name = '@tips_js';\n};\nmyFunc.prototype.age = '10 days';\n\nvar user = new myFunc();\n\nuser.hasOwnProperty('name'); // true\nuser.hasOwnProperty('age'); // false, because age is from the prototype chain\n```\n\nCheck the [live examples here](https://jsbin.com/tecoqa/edit?js,console)!\n\nI also recommend reading [this discussion](https://github.com/loverajoel/jstips/issues/62) about common mistakes made when checking a property's existence in objects."},"2016-01-23-converting-to-number-fast-way.md":{"name":"2016-01-23-converting-to-number-fast-way.md","sha":"1e6749dd021de9639853782b6910ff3850a60cfd","content":"---\nlayout: post\n\ntitle: Converting to number fast way\ntip-number: 23\ntip-username: sonnyt\ntip-username-profile: http://twitter.com/sonnyt\ntip-tldr: Converting strings to numbers is extremely common. The easiest and fastest way to achieve that would be using the + operator.\n\ncategories:\n    - en\n---\n\nConverting strings to numbers is extremely common. The easiest and fastest ([jsPerf](https://jsperf.com/number-vs-parseint-vs-plus/29)) way to achieve that would be using the `+` (plus) operator.\n\n```javascript\nvar one = '1';\n\nvar numberOne = +one; // Number 1\n```\n\nYou can also use the `-` (minus) operator which type-converts the value into number but also negates it.\n\n```javascript\nvar one = '1';\n\nvar negativeNumberOne = -one; // Number -1\n```\n"},"2016-01-19-safe-string-concatenation.md":{"name":"2016-01-19-safe-string-concatenation.md","sha":"979d865b9ea9c42cfe2399da51657dc2dd634973","content":"---\nlayout: post\n\ntitle: Safe string concatenation\ntip-number: 19\ntip-username: gogainda\ntip-username-profile: https://twitter.com/gogainda\ntip-tldr: Suppose you have a couple of variables with unknown types and you want to concatenate them in a string. To be sure that the arithmetical operation is not be applied during concatenation, use concat\n\ncategories:\n    - en\n---\n\nSuppose you have a couple of variables with unknown types and you want to concatenate them in a string. To be sure that the arithmetical operation is not be applied during concatenation, use `concat`:\n\n```javascript\nvar one = 1;\nvar two = 2;\nvar three = '3';\n\nvar result = ''.concat(one, two, three); //\"123\"\n```\n\nThis way of concatenting does exactly what you'd expect. In contrast, concatenation with pluses might lead to unexpected results:\n\n```javascript\nvar one = 1;\nvar two = 2;\nvar three = '3';\n\nvar result = one + two + three; //\"33\" instead of \"123\"\n```\n\nSpeaking about performance, compared to the `join` [type](http://www.sitepoint.com/javascript-fast-string-concatenation/) of concatenation, the speed of `concat` is pretty much the same.\n\nYou can read more about the `concat` function on MDN [page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat)."},"2016-02-16-basics-declarations.md":{"name":"2016-02-16-basics-declarations.md","sha":"81769ac19a4328baef5bceedb05b7cbef54e664d","content":"---\nlayout: post\n\ntitle: Basics declarations\ntip-number: 47\ntip-username: adaniloff \ntip-username-profile: https://github.com/adaniloff\ntip-tldr: Understand and work with declarations.\n\ncategories:\n    - en\n---\n\nBelow, different ways to declare variables in JavaScript. \nComments and console.log should be enough to explain what's happening here:\n\n```js\nvar y, x = y = 1 //== var x; var y; x = y = 1\nconsole.log('--> 1:', `x = ${x}, y = ${y}`)\n\n// Will print\n//--> 1: x = 1, y = 1\n```\n\nFirst, we just set two variables. Nothing much here.\n\n```js\n;(() => { \n  var x = y = 2 // == var x; x = y = 2;\n  console.log('2.0:', `x = ${x}, y = ${y}`)\n})()\nconsole.log('--> 2.1:', `x = ${x}, y = ${y}`)\n\n// Will print\n//2.0: x = 2, y = 2\n//--> 2.1: x = 1, y = 2\n```\n\nAs you can see, the code has only changed the global y, as we haven't declared the variable in the closure.\n\n```js\n;(() => { \n  var x, y = 3 // == var x; var y = 3;\n  console.log('3.0:', `x = ${x}, y = ${y}`)\n})()\nconsole.log('--> 3.1:', `x = ${x}, y = ${y}`)\n\n// Will print\n//3.0: x = undefined, y = 3\n//--> 3.1: x = 1, y = 2\n```\n\nNow we declare both variables through var. Meaning they only live in the context of the closure.\n\n```js\n;(() => { \n  var y, x = y = 4 // == var x; var y; x = y = 4\n  console.log('4.0:', `x = ${x}, y = ${y}`)\n})()\nconsole.log('--> 4.1:', `x = ${x}, y = ${y}`)\n\n// Will print\n//4.0: x = 4, y = 4\n//--> 4.1: x = 1, y = 2\n```\n\nBoth variables have been declared using var and only after that we've set their values. As local > global, x and y are local in the closure, meaning the global x and y are untouched.\n\n```js\nx = 5 // == x = 5\nconsole.log('--> 5:', `x = ${x}, y = ${y}`)\n\n// Will print\n//--> 5: x = 5, y = 2\n```\n\nThis last line is explicit by itself.\n\nYou can test this and see the result [thanks to babel](https://babeljs.io/repl/#?experimental=false&evaluate=true&loose=false&spec=false&code=var%20y%2C%20x%20%3D%20y%20%3D%201%20%2F%2F%3D%3D%20var%20x%3B%20var%20y%3B%20x%20%3D%20y%20%3D%201%0Aconsole.log('--%3E%201%3A'%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%0A%2F%2F%20Will%20print%0A%2F%2F--%3E%201%3A%20x%20%3D%201%2C%20y%20%3D%201%0A%0A%3B(()%20%3D%3E%20%7B%20%0A%20%20var%20x%20%3D%20y%20%3D%202%20%2F%2F%20%3D%3D%20var%20x%3B%20y%20%3D%202%3B%0A%20%20console.log('2.0%3A'%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%7D)()%0Aconsole.log('--%3E%202.1%3A'%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%0A%2F%2F%20Will%20print%0A%2F%2F2.0%3A%20x%20%3D%202%2C%20y%20%3D%202%0A%2F%2F--%3E%202.1%3A%20x%20%3D%201%2C%20y%20%3D%202%0A%0A%3B(()%20%3D%3E%20%7B%20%0A%20%20var%20x%2C%20y%20%3D%203%20%2F%2F%20%3D%3D%20var%20x%3B%20var%20y%20%3D%203%3B%0A%20%20console.log('3.0%3A'%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%7D)()%0Aconsole.log('--%3E%203.1%3A'%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%0A%2F%2F%20Will%20print%0A%2F%2F3.0%3A%20x%20%3D%20undefined%2C%20y%20%3D%203%0A%2F%2F--%3E%203.1%3A%20x%20%3D%201%2C%20y%20%3D%202%0A%0A%3B(()%20%3D%3E%20%7B%20%0A%20%20var%20y%2C%20x%20%3D%20y%20%3D%204%20%2F%2F%20%3D%3D%20var%20x%3B%20var%20y%3B%20x%20%3D%20y%20%3D%203%0A%20%20console.log('4.0%3A'%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%7D)()%0Aconsole.log('--%3E%204.1%3A'%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%0A%2F%2F%20Will%20print%0A%2F%2F4.0%3A%20x%20%3D%204%2C%20y%20%3D%204%0A%2F%2F--%3E%204.1%3A%20x%20%3D%201%2C%20y%20%3D%202%0A%0Ax%20%3D%205%20%2F%2F%20%3D%3D%20x%20%3D%205%0Aconsole.log('--%3E%205%3A'%2C%20%60x%20%3D%20%24%7Bx%7D%2C%20y%20%3D%20%24%7By%7D%60)%0A%0A%2F%2F%20Will%20print%0A%2F%2F--%3E%205%3A%20x%20%3D%205%2C%20y%20%3D%202).\n\nMore informations available on the [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var).\n\nSpecial thanks to @kurtextrem for his collaboration :)!\n"},"2016-01-25-Using-immediately-invoked-function-expression.md":{"name":"2016-01-25-Using-immediately-invoked-function-expression.md","sha":"8b60e4848b6950f40685f8c9975761d83c92afca","content":"---\nlayout: post\n\ntitle: Using immediately invoked function expression\ntip-number: 25\ntip-username: rishantagarwal \ntip-username-profile: https://github.com/rishantagarwal\ntip-tldr: Called as \"Iffy\" ( IIFE - immediately invoked function expression) is an anonymous function expression that is immediately invoked and has some important uses in Javascript.\n\n\ncategories:\n    - en\n---\n\nCalled as \"Iffy\" ( IIFE - immediately invoked function expression) is an anonymous function expression that is immediately invoked and has some important uses in Javascript.\n\n```javascript\n\n(function() {\n // Do something​\n }\n)()\n\n```\n\nIt is an anonymous function expression that is immediately invoked, and it has some particularly important uses in JavaScript.\n\nThe pair of parenthesis surrounding the anonymous function turns the anonymous function into a function expression or variable expression. So instead of a simple anonymous function in the global scope, or wherever it was defined, we now have an unnamed function expression.\n\nSimilarly, we can even create a named, immediately invoked function expression:\n\n```javascript\n(someNamedFunction = function(msg) {\n\tconsole.log(msg || \"Nothing for today !!\")\n\t}) (); // Output --> Nothing for today !!​\n​\nsomeNamedFunction(\"Javascript rocks !!\"); // Output --> Javascript rocks !!\nsomeNamedFunction(); // Output --> Nothing for today !!​\n```\n\nFor more details, check the following URL's - \n1. [Link 1](https://blog.mariusschulz.com/2016/01/13/disassembling-javascripts-iife-syntax) \n2. [Link 2](http://javascriptissexy.com/12-simple-yet-powerful-javascript-tips/) \n\nPerformance:\n[jsPerf](http://jsperf.com/iife-with-call)"},"2015-12-29-insert-item-inside-an-array.md":{"name":"2015-12-29-insert-item-inside-an-array.md","sha":"6184725ff9468bc02d940ca07301e2b6c2ca0f14","content":"---\nlayout: post\n\ntitle: Insert item inside an Array\ntip-number: 00\ntip-username: loverajoel\ntip-username-profile: https://github.com/loverajoel\ntip-tldr: Inserting an item into an existing array is a daily common task. You can add elements to the end of an array using push, to the beginning using unshift, or to the middle using splice.\n\n\ncategories:\n    - en\n---\n\n# Inserting and item into an existing array\n\nInserting an item into an existing array is a daily common task. You can add elements to the end of an array using push, to the beginning using unshift, or to the middle using splice.\n\nThose are known methods, but it doesn't mean there isn't a more performant way. Here we go:\n\n## Adding an element at the end\n\nAdding an element at the end of the array is easy with push(), but it can be done in different ways.\n\n```javascript\nvar arr = [1,2,3,4,5];\nvar arr2 = [];\n\narr.push(6);\narr[arr.length] = 6;\narr2 = arr.concat([6]);\n```\nBoth first methods modify the original array. Don't believe me? Check the [jsperf](http://jsperf.com/push-item-inside-an-array)\n\n### Performance on mobile :\n\n#### Android (v4.2.2)\n\n1. _arr.push(6);_ and _arr[arr.length] = 6;_ have the same performance // 3 319 694 ops/sec\n3. _arr2 = arr.concat([6]);_ 50.61 % slower than the other two methods\n\n#### Chrome Mobile (v33.0.0)\n\n1. _arr[arr.length] = 6;_ // 6 125 975 ops/sec\n2. _arr.push(6);_ 66.74 % slower\n3. _arr2 = arr.concat([6]);_ 87.63 % slower\n\n#### Safari Mobile (v9)\n\n1. _arr[arr.length] = 6;_ // 7 452 898 ops/sec\n2. _arr.push(6);_ 40.19 % slower\n3. _arr2 = arr.concat([6]);_ 49.78 % slower\n\n```javascript\nFinal victor\n\n1. arr[arr.length] = 6; // with an average of 5 632 856 ops/sec\n2. arr.push(6); // 35.64 % slower\n3. arr2 = arr.concat([6]); // 62.67 % slower\n```\n\n### Performance on desktop\n\n#### Chrome (v48.0.2564)\n\n1. _arr[arr.length] = 6;_ // 21 602 722 ops/sec\n2. _arr.push(6);_ 61.94 % slower\n3. _arr2 = arr.concat([6]);_ 87.45 % slower\n\n#### Firefox (v44)\n\n1. _arr.push(6);_ // 56 032 805 ops/sec\n2. _arr[arr.length] = 6;_ 0.52 % slower\n3. _arr2 = arr.concat([6]);_ 87.36 % slower\n\n#### IE (v11)\n\n1. _arr[arr.length] = 6;_ // 67 197 046 ops/sec\n2. _arr.push(6);_ 39.61 % slower\n3. _arr2 = arr.concat([6]);_ 93.41 % slower\n\n#### Opera (v35.0.2066.68)\n\n1. _arr[arr.length] = 6;_ // 30 775 071 ops/sec\n2. _arr.push(6);_ 71.60 % slower\n3. _arr2 = arr.concat([6]);_ 83.70 % slower\n\n#### Safari (v9.0.3)\n\n1. _arr.push(6);_ // 42 670 978 ops/sec\n2. _arr[arr.length] = 6;_ 0.80 % slower\n3. _arr2 = arr.concat([6]);_ 76.07 % slower\n\n```javascript\nFinal victor\n\n1. arr[arr.length] = 6; // with an average of 42 345 449 ops/sec\n2. arr.push(6); // 34.66 % slower\n3. arr2 = arr.concat([6]); // 85.79 % slower\n```\n\n## Add an element at the beginning\n\nNow if we are trying to add an item to the beginning of the array:\n\n```javascript\nvar arr = [1,2,3,4,5];\n\narr.unshift(0);\n[0].concat(arr);\n```\nHere is a little more detail: unshift edits the original array; concat returns a new array. [jsperf](http://jsperf.com/unshift-item-inside-an-array)\n\n### Performance on mobile :\n\n#### Android (v4.2.2)\n\n1. _[0].concat(arr);_ // 1 808 717 ops/sec\n2. _arr.unshift(0);_ 97.85 % slower\n\n#### Chrome Mobile (v33.0.0)\n\n1. _[0].concat(arr);_ // 1 269 498 ops/sec\n2. _arr.unshift(0);_ 99.86 % slower\n\n#### Safari Mobile (v9)\n\n1. _arr.unshift(0);_ // 3 250 184 ops/sec\n2. _[0].concat(arr);_ 33.67 % slower\n\n```javascript\nFinal victor\n\n1. [0].concat(arr); // with an average of 4 972 622 ops/sec\n2. arr.unshift(0); // 64.70 % slower\n```\n\n### Performance on desktop\n\n#### Chrome (v48.0.2564)\n\n1. _[0].concat(arr);_ // 2 656 685 ops/sec\n2. _arr.unshift(0);_ 96.77 % slower\n\n#### Firefox (v44)\n\n1. _[0].concat(arr);_ // 8 039 759 ops/sec\n2. _arr.unshift(0);_ 99.72 % slower\n\n#### IE (v11)\n\n1. _[0].concat(arr);_ // 3 604 226 ops/sec\n2. _arr.unshift(0);_ 98.31 % slower\n\n#### Opera (v35.0.2066.68)\n\n1. _[0].concat(arr);_ // 4 102 128 ops/sec\n2. _arr.unshift(0);_ 97.44 % slower\n\n#### Safari (v9.0.3)\n\n1. _arr.unshift(0);_ // 12 356 477 ops/sec\n2. _[0].concat(arr);_ 15.17 % slower\n\n```javascript\nFinal victor\n\n1. [0].concat(arr); // with an average of 6 032 573 ops/sec\n2. arr.unshift(0); // 78.65 % slower\n```\n\n## Add an element in the middle\n\nAdding items in the middle of an array is easy with splice, and it's the most performant way to do it.\n\n```javascript\nvar items = ['one', 'two', 'three', 'four'];\nitems.splice(items.length / 2, 0, 'hello');\n```\n\nI tried to run these tests in various Browsers and OS and the results were similar. I hope these tips will be useful for you and encourage to perform your own tests!"},"2016-01-03-improve-nested-conditionals.md":{"name":"2016-01-03-improve-nested-conditionals.md","sha":"059af68fb079bfb969a7d3b15b2046ef670d3245","content":"---\nlayout: post\n\ntitle: Improve Nested Conditionals\ntip-number: 03\ntip-username: AlbertoFuente \ntip-username-profile: https://github.com/AlbertoFuente\ntip-tldr: How can we improve and make a more efficient nested `if` statement in javascript?\n\ncategories:\n    - en\n---\n\nHow can we improve and make a more efficient nested `if` statement in javascript?\n\n```javascript\nif (color) {\n  if (color === 'black') {\n    printBlackBackground();\n  } else if (color === 'red') {\n    printRedBackground();\n  } else if (color === 'blue') {\n    printBlueBackground();\n  } else if (color === 'green') {\n    printGreenBackground();\n  } else {\n    printYellowBackground();\n  }\n}\n```\n\nOne way to improve the nested `if` statement would be using the `switch` statement. Although it is less verbose and is more ordered, it's not recommended to use it because it's so difficult to debug errors. Here's [why](https://toddmotto.com/deprecating-the-switch-statement-for-object-literals).\n\n```javascript\nswitch(color) {\n  case 'black':\n    printBlackBackground();\n    break;\n  case 'red':\n    printRedBackground();\n    break;\n  case 'blue':\n    printBlueBackground();\n    break;\n  case 'green':\n    printGreenBackground();\n    break;\n  default:\n    printYellowBackground();\n}\n```\n\nBut what if we have a conditional with several checks in each statement? In this case, if we want it less verbose and more ordered, we can use the conditional `switch`.\nIf we pass `true` as a parameter to the `switch` statement, it allows us to put a conditional in each case.\n\n```javascript\nswitch(true) {\n  case (typeof color === 'string' && color === 'black'):\n    printBlackBackground();\n    break;\n  case (typeof color === 'string' && color === 'red'):\n    printRedBackground();\n    break;\n  case (typeof color === 'string' && color === 'blue'):\n    printBlueBackground();\n    break;\n  case (typeof color === 'string' && color === 'green'):\n    printGreenBackground();\n    break;\n  case (typeof color === 'string' && color === 'yellow'):\n    printYellowBackground();\n    break;\n}\n```\n\nIf refactoring is an option, we can try to simplify the functions themselves. For example instead of having a function for each background color we could have an function that takes the color as an argument.\n\n```javascript\nfunction printBackground(color) {\n  if (!color || typeof color !== 'string') {\n    return; // Invalid color, return immediately\n  }\n}\n```\n\nBut if refactoring is not an option, we must always avoid having several checks in every condition and avoid using `switch` as much as possible. We also must take into account that the most efficient way to do this is through an `object`.\n\n```javascript\nvar colorObj = {\n  'black': printBlackBackground,\n  'red': printRedBackground,\n  'blue': printBlueBackground,\n  'green': printGreenBackground,\n  'yellow': printYellowBackground\n};\n\nif (color in colorObj) {\n  colorObj[color]();\n}\n```\n\nHere you can find more information about [this](http://www.nicoespeon.com/en/2015/01/oop-revisited-switch-in-js/).\n"},"2016-01-04-sorting-strings-with-accented-characters.md":{"name":"2016-01-04-sorting-strings-with-accented-characters.md","sha":"6876149246d747b106a65bd585065e7e801f52c0","content":"---\nlayout: post\n\ntitle: Sorting strings with accented characters\ntip-number: 04\ntip-username: loverajoel \ntip-username-profile: https://github.com/loverajoel\ntip-tldr: Javascript has a native method **sort** that allows sorting arrays. Doing a simple `array.sort()` will treat each array entry as a string and sort it alphabetically. But when you try order an array of non ASCII characters you will obtain a strange result.\n\ncategories:\n    - en\n---\n\nJavascript has a native method **[sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)** that allows sorting arrays. Doing a simple `array.sort()` will treat each array entry as a string and sort it alphabetically. Also you can provide your [own custom sorting](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters) function.\n\n```javascript\n['Shanghai', 'New York', 'Mumbai', 'Buenos Aires'].sort();\n// [\"Buenos Aires\", \"Mumbai\", \"New York\", \"Shanghai\"]\n```\n\nBut when you try order an array of non ASCII characters like this `['é', 'a', 'ú', 'c']`, you will obtain a strange result `['c', 'e', 'á', 'ú']`. That happens because sort works only with the English language.\n\nSee the next example:\n\n```javascript\n// Spanish\n['único','árbol', 'cosas', 'fútbol'].sort();\n// [\"cosas\", \"fútbol\", \"árbol\", \"único\"] // bad order\n\n// German\n['Woche', 'wöchentlich', 'wäre', 'Wann'].sort();\n// [\"Wann\", \"Woche\", \"wäre\", \"wöchentlich\"] // bad order\n```\n\nFortunately, there are two ways to overcome this behavior [localeCompare](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare) and [Intl.Collator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator) provided by ECMAScript Internationalization API.\n\n> Both methods have their own custom parameters in order to configure it to work adequately.\n\n### Using `localeCompare()`\n\n```javascript\n['único','árbol', 'cosas', 'fútbol'].sort(function (a, b) {\n  return a.localeCompare(b);\n});\n// [\"árbol\", \"cosas\", \"fútbol\", \"único\"]\n\n['Woche', 'wöchentlich', 'wäre', 'Wann'].sort(function (a, b) {\n  return a.localeCompare(b);\n});\n// [\"Wann\", \"wäre\", \"Woche\", \"wöchentlich\"]\n```\n\n### Using `Intl.Collator()`\n\n```javascript\n['único','árbol', 'cosas', 'fútbol'].sort(Intl.Collator().compare);\n// [\"árbol\", \"cosas\", \"fútbol\", \"único\"]\n\n['Woche', 'wöchentlich', 'wäre', 'Wann'].sort(Intl.Collator().compare);\n// [\"Wann\", \"wäre\", \"Woche\", \"wöchentlich\"]\n```\n\n- For each method you can customize the location.\n- According to [Firefox](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare#Performance) Intl.Collator is faster when comparing large numbers of strings.\n\nSo when you are working with arrays of strings in a language other than English, remember to use this method to avoid unexpected sorting."},"2016-01-31-avoid-modifying-or-passing-arguments-into-other-functions—it-kills-optimization.md":{"name":"2016-01-31-avoid-modifying-or-passing-arguments-into-other-functions—it-kills-optimization.md","sha":"b71d540cceff1138e1217af46ee5e4ff0d95a59f","content":"---\nlayout: post\n\ntitle: Avoid modifying or passing `arguments` into other functions — it kills optimization\ntip-number: 31\ntip-username: berkana\ntip-username-profile: https://github.com/berkana\ntip-tldr: Within JavaScript functions, the variable name `arguments` lets you access all of the arguments passed to the function. `arguments` is an *array-like object*; `arguments` can be accessed using array notation, and it has the *length* property, but it doesn't have many of the built-in methods that arrays have such as `filter` and `map` and `forEach`. Because of this, it is a fairly common practice to convert `arguments` into an array using the following snipet\n\n\ncategories:\n    - en\n---\n\n###Background\n\nWithin JavaScript functions, the variable name [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) lets you access all of the arguments passed to the function. `arguments` is an *array-like object*; `arguments` can be accessed using array notation, and it has the *length* property, but it doesn't have many of the built-in methods that arrays have such as `filter` and `map` and `forEach`. Because of this, it is a fairly common practice to convert `arguments` into an array using the following:\n\n```js\nvar args = Array.prototype.slice.call(arguments);\n```\nThis calls the `slice` method from the `Array` prototype, passing it `arguments`; the `slice` method returns a shallow copy of `arguments` as a new array object. A common shorthand for this is :\n\n```js\nvar args = [].slice.call(arguments);\n```\nIn this case, instead of calling `slice` from the `Array` prototype, it is simply being called from an empty array literal.\n\n###Optimization\n\nUnfortunately, passing `arguments` into any function call will cause the V8 JavaScript engine used in Chrome and Node to skip optimization on the function that does this, which can result in considerably slower performance. See this article on [optimization killers](https://github.com/petkaantonov/bluebird/wiki/Optimization-killers). Passing `arguments` to any other function is known as *leaking `arguments`*.\n\nInstead, if you want an array of the arguments that lets you use you need to resort to this:\n\n```js\nvar args = new Array(arguments.length);\nfor(var i = 0; i < args.length; ++i) {\n  args[i] = arguments[i];\n}\n```\n\nYes it is more verbose, but in production code, it is worth it for the performance optimization."},"2016-02-01-map-to-the-rescue-adding-order-to-object-properties.md":{"name":"2016-02-01-map-to-the-rescue-adding-order-to-object-properties.md","sha":"d488ea29fc53f6ea4b67e8a380a1b9a4045156d0","content":"---\nlayout: post\n\ntitle: Map() to the rescue; adding order to Object properties\ntip-number: 32\ntip-username: loverajoel\ntip-username-profile: https://twitter.com/loverajoel\ntip-tldr: An Object it is an unordered collection of properties... that means that if you are trying to save ordered data inside an Object, you have to review it because properties order in objects are not guaranteed.\n\ncategories:\n    - en\n---\n\n## Object properties order\n\n> An object is a member of the type Object. It is an unordered collection of properties each of which contains a primitive value, object, or function. A function stored in a property of an object is called a method. [ECMAScript](http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf)\n\nTake a look in action\n\n```js\nvar myObject = {\n\tz: 1,\n\t'@': 2,\n\tb: 3,\n\t1: 4,\n\t5: 5\n};\nconsole.log(myObject) // Object {1: 4, 5: 5, z: 1, @: 2, b: 3}\n\nfor (item in myObject) {...\n// 1\n// 5\n// z\n// @\n// b\n```\nEach browser have his own rules about the order in objects bebause technically, order is unspecified.\n\n## How to solve this?\n\n### Map\n\nUsing a new ES6 feature called Map. A [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) object iterates its elements in insertion order — a `for...of` loop returns an array of [key, value] for each iteration. \n\n```js\nvar myObject = new Map();\nmyObject.set('z', 1);\nmyObject.set('@', 2);\nmyObject.set('b', 3);\nfor (var [key, value] of myObject) {\n  console.log(key, value);\n...\n// z 1\n// @ 2\n// b 3\n```\n\n### Hack for old browsers\n\nMozilla suggest:\n> So, if you want to simulate an ordered associative array in a cross-browser environment, you are forced to either use two separate arrays (one for the keys and the other for the values), or build an array of single-property objects, etc.\n\n```js\n// Using two separate arrays\nvar objectKeys = [z, @, b, 1, 5];\nfor (item in objectKeys) {\n\tmyObject[item]\n...\n\n// Build an array of single-property objects\nvar myData = [{z: 1}, {'@': 2}, {b: 3}, {1: 4}, {5: 5}];\n```\n"},"2016-02-12-use-destructuring-in-function-parameters.md":{"name":"2016-02-12-use-destructuring-in-function-parameters.md","sha":"dda91b22d8f737fb48cd96947268abc35eebff8b","content":"---\nlayout: post\n\ntitle: Use destructuring in function parameters\ntip-number: 43\ntip-username: dislick \ntip-username-profile: https://github.com/dislick\ntip-tldr: Did you know that you can use destructuring in function parameters?\n\ncategories:\n    - en\n---\n\nI am sure many of you are already familiar with the [ES6 Destructuring Assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment). Did you know that you can also use it in function parameters? \n\n```javascript\nvar sayHello = function({ name, surname }) {\n  console.log(`Hello ${name} ${surname}! How are you?`);\n};\n\nsayHello({\n  name: 'John',\n  surname: 'Smith'\n});\n```\n\nThis is great for functions which accept an options object.\n\n> Please note that the Destructuring Assignment is not yet available in Node.js and almost all browsers. You can however use the `--harmony-destructuring` flag for Node.js if you'd like to try it for yourself now."},"2016-02-17-reminders-about-reduce-function-usage.md":{"name":"2016-02-17-reminders-about-reduce-function-usage.md","sha":"2520088ede46c38677bd221deac6abd542ea77b7","content":"---\nlayout: post\n\ntitle: How to `reduce()` arrays\ntip-number: 48\ntip-username: darul75\ntip-username-profile: https://twitter.com/darul75\ntip-tldr: Some reminders about using `reduce()`\n\ncategories:\n    - en\n---\n\nAs written in documentation the `reduce()` method applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value.\n\n### Signature\n\n[reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce) function accepts 2 parameters (M: mandatory, O: optional):\n\n- (M) a callback **reducer function** to be applied that deals with a pair of previous (result of previous computation) and next element until end of the list.\n- (O) an **initial value** to be used as the first argument to the first call of the callback.\n\nSo let's see a common usage and later a more sophisticated one.\n\n### Common usage (accumulation, concatenation)\n\nWe are on Amazon website (prices in $) and our caddy is quite full, let's compute total.\n\n```javascript\n// my current amazon caddy purchases\nvar items = [{price: 10}, {price: 120}, {price: 1000}];\n\n// our reducer function\nvar reducer = function add(sumSoFar, item) { return sumSoFar + item.price; };\n\n// do the job\nvar total = items.reduce(reducer, 0);\n\nconsole.log(total); // 1130\n```\n\nOptional reduce function parameter was primitive integer type 0 in that first case, but it could have been an Object, an Array...instead of a primitive type,\nbut we will see that later.\n\nNow, cool I received a discount coupon of 20$.\n\n```javascript\nvar total = items.reduce(reducer,-20);\n\nconsole.log(total); // 1110\n```\n\n### Advanced usage (combination)\n\nThis second usage example is inspired by Redux [combineReducers](http://redux.js.org/docs/api/combineReducers.html) function [source](https://github.com/reactjs/redux/blob/master/src/combineReducers.js#L93).\n\nIdea behind is to separate reducer function into separate individual functions and at the end compute a new *single big reducer function*. \n\nTo illustrate this, let's create a single object literal with some reducers function able to compute total prices in different currency $, €...\n\n```javascript\nvar reducers = {\n  totalInDollar: function(state, item) {\n    // specific statements...\n    return state.dollars += item.price;\n  },\n  totalInEuros : function(state, item) {\n    return state.euros += item.price * 0.897424392;\n  },\n  totalInPounds : function(state, item) {\n    return state.pounds += item.price * 0.692688671;\n  },\n  totalInYen : function(state, item) {\n    return state.yens += item.price * 113.852;\n  }\n  // more...\n};\n```\n\nThen, we create a new swiss knife function \n\n- responsible for applying each partial reduce functions.\n- that will return a new callback reducer function\n\n```javascript\nvar combineTotalPriceReducers = function(reducers) {\n  return function(state, item) {\n    return Object.keys(reducers).reduce(\n      function(nextState, key) {\n        reducers[key](state, item);\n        return state;\n      },\n      {}      \n    );\n  }\n};\n```\n\nNow let's see how using it.\n\n```javascript\nvar bigTotalPriceReducer = combineTotalPriceReducers(reducers);\n\nvar initialState = {dollars: 0, euros:0, yens: 0, pounds: 0};\n\nvar totals = items.reduce(bigTotalPriceReducer, initialState);\n\nconsole.log(totals);\n\n/*\nObject {dollars: 1130, euros: 1015.11531904, yens: 127524.24, pounds: 785.81131152}\n*/\n```\n\nI hope this approach can give you another idea of using reduce() function for your own needs.\n\nYour reduce function could handle an history of each computation by instance as it is done in Ramdajs with [scan](http://ramdajs.com/docs/#scan) function\n\n[JSFiddle to play with](https://jsfiddle.net/darul75/81tgt0cd/)\n"},"2016-01-06-writing-a-single-method-for-arrays-and-a-single-element.md":{"name":"2016-01-06-writing-a-single-method-for-arrays-and-a-single-element.md","sha":"9bc10d4703b70ab14cc122d56753d7ba54871280","content":"---\nlayout: post\n\ntitle: Writing a single method for arrays and a single element\ntip-number: 06\ntip-username: mattfxyz\ntip-username-profile: https://twitter.com/mattfxyz\ntip-tldr: Rather than writing separate methods to handle an array and a single element parameter, write your functions so they can handle both. This is similar to how some of jQuery's functions work (`css` will modify everything matched by the selector).\n\ncategories:\n    - en\n---\n\nRather than writing separate methods to handle an array and a single element parameter, write your functions so they can handle both. This is similar to how some of jQuery's functions work (`css` will modify everything matched by the selector).\n\nYou just have to concat everything into an array first. `Array.concat` will accept an array or a single element.\n\n```javascript\nfunction printUpperCase(words) {\n  var elements = [].concat(words || []);\n  for (var i = 0; i < elements.length; i++) {\n    console.log(elements[i].toUpperCase());\n  }\n}\n```\n\n`printUpperCase` is now ready to accept a single node or an array of nodes as its parameter.  It also avoids the potential `TypeError` that would be thrown if no parameter was passed.\n\n```javascript\nprintUpperCase(\"cactus\");\n// => CACTUS\nprintUpperCase([\"cactus\", \"bear\", \"potato\"]);\n// => CACTUS\n//  BEAR\n//  POTATO\n```\n"},"2016-01-30-converting-truthy-falsy-values-to-boolean.md":{"name":"2016-01-30-converting-truthy-falsy-values-to-boolean.md","sha":"d430f327badcd3fc75c7319da436fba7da03d0b4","content":"---\nlayout: post\n\ntitle: Converting truthy/falsy values to boolean\ntip-number: 30\ntip-username: hakhag\ntip-username-profile: https://github.com/hakhag\ntip-tldr: Logical operators are a core part of JavaScript, here you can see a a way you always get a true or false no matter what was given to it.\n\n\ncategories:\n    - en\n---\n\nYou can convert a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) or [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value to true boolean with the `!!` operator.\n\n```js\n!!\"\" // false\n!!0 // false\n!!null // false\n!!undefined // false\n!!NaN // false\n\n!!\"hello\" // true\n!!1 // true\n!!{} // true\n!![] // true\n```\n\n"},"2016-01-09-template-strings.md":{"name":"2016-01-09-template-strings.md","sha":"3f248e20f624ab1000253db586d6751fdbd2e46a","content":"---\nlayout: post\n\ntitle: Template Strings\ntip-number: 09\ntip-username: JakeRawr\ntip-username-profile: https://github.com/JakeRawr\ntip-tldr: As of ES6, JS now has template strings as an alternative to the classic end quotes strings.\n\ncategories:\n    - en\n---\n\nAs of ES6, JS now has template strings as an alternative to the classic end quotes strings.\n\nEx:\nNormal string\n\n```javascript\nvar firstName = 'Jake';\nvar lastName = 'Rawr';\nconsole.log('My name is ' + firstName + ' ' + lastName);\n// My name is Jake Rawr\n```\nTemplate String\n\n```javascript\nvar firstName = 'Jake';\nvar lastName = 'Rawr';\nconsole.log(`My name is ${firstName} ${lastName}`);\n// My name is Jake Rawr\n```\n\nYou can do multi-line strings without `\\n` and simple logic (ie 2+3) inside `${}` in template strings.\n\nYou are also able to modify the output of template strings using a function; they are called [tagged template strings]\n(https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings#Tagged_template_strings) for example usages of tagged template strings.\n\nYou may also want to [read](https://hacks.mozilla.org/2015/05/es6-in-depth-template-strings-2) to understand template strings more.\n"},"2016-01-14-fat-arrow-functions.md":{"name":"2016-01-14-fat-arrow-functions.md","sha":"26380d1343799bfe41cd3098a56daf0e5ab49a12","content":"---\nlayout: post\n\ntitle: Fat Arrow Functions\ntip-number: 14\ntip-username: pklinger\ntip-username-profile: https://github.com/pklinger/\ntip-tldr: Introduced as a new feature in ES6, fat arrow functions may come as a handy tool to write more code in fewer lines\n\ncategories:\n    - en\n---\n\nIntroduced as a new feature in ES6, fat arrow functions may come as a handy tool to write more code in fewer lines. The name comes from its syntax, `=>`, which is a 'fat arrow', as compared to a thin arrow `->`. Some programmers might already know this type of function from different languages such as Haskell, as 'lambda expressions', or as 'anonymous functions'. It is called anonymous, as these arrow functions do not have a descriptive function name.\n\n### What are the benefits?\n* Syntax: fewer LOC; no more typing `function` keyword over and over again\n* Semantics: capturing the keyword `this` from the surrounding context\n\n### Simple syntax example\nHave a look at these two code snippets, which do the exact same job, and you will quickly understand what fat arrow functions do:\n\n```javascript\n// general syntax for fat arrow functions\nparam => expression\n\n// may also be written with parentheses\n// parentheses are required on multiple params\n(param1 [, param2]) => expression\n\n\n// using functions\nvar arr = [5,3,2,9,1];\nvar arrFunc = arr.map(function(x) {\n  return x * x;\n});\nconsole.log(arr)\n\n// using fat arrow\nvar arr = [5,3,2,9,1];\nvar arrFunc = arr.map((x) => x*x);\nconsole.log(arr)\n```\n\nAs you can see, the fat arrow function in this case can save you time typing out the parentheses as well as the function and return keywords. I would advise you to always write parentheses around the parameter inputs, as the parentheses will be needed for multiple input parameters, such as in `(x,y) => x+y`. It is just a way to cope with forgetting them in different use cases. But the code above would also work like this: `x => x*x`. So far, these are only syntactical improvements, which lead to fewer LOC and better readability.\n\n### Lexically binding `this`\n\nThere is another good reason to use fat arrow functions. There is the issue with the context of `this`. With arrow functions, you don't need to worry about `.bind(this)` or setting `that = this` anymore, as fat arrow functions pick the context of `this` from the lexical surrounding. Have a look at the next [example] (https://jsfiddle.net/pklinger/rw94oc11/):\n\n```javascript\n\n// globally defined this.i\nthis.i = 100;\n\nvar counterA = new CounterA();\nvar counterB = new CounterB();\nvar counterC = new CounterC();\nvar counterD = new CounterD();\n\n// bad example\nfunction CounterA() {\n  // CounterA's `this` instance (!! gets ignored here)\n  this.i = 0;\n  setInterval(function () {\n    // `this` refers to global object, not to CounterA's `this`\n    // therefore starts counting with 100, not with 0 (local this.i)\n    this.i++;\n    document.getElementById(\"counterA\").innerHTML = this.i;\n  }, 500);\n}\n\n// manually binding that = this\nfunction CounterB() {\n  this.i = 0;\n  var that = this;\n  setInterval(function() {\n    that.i++;\n    document.getElementById(\"counterB\").innerHTML = that.i;\n  }, 500);\n}\n\n// using .bind(this)\nfunction CounterC() {\n  this.i = 0;\n  setInterval(function() {\n    this.i++;\n    document.getElementById(\"counterC\").innerHTML = this.i;\n  }.bind(this), 500);\n}\n\n// fat arrow function\nfunction CounterD() {\n  this.i = 0;\n  setInterval(() => {\n    this.i++;\n    document.getElementById(\"counterD\").innerHTML = this.i;\n  }, 500);\n}\n```\n\nFurther information about fat arrow functions may be found at [MDN] (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions). To see different syntax options visit [this site] (http://jsrocks.org/2014/10/arrow-functions-and-their-scope/)."},"2016-02-26-extract-unix-timestamp-easily.md":{"name":"2016-02-26-extract-unix-timestamp-easily.md","sha":"1f9f5e03bc2eca0ba5ac19c6ae01565c76f944f4","content":"---\nlayout: post\n\ntitle: Easiest way to extract unix timestamp in JS\ntip-number: 49\ntip-username: nmrony\ntip-username-profile: https://github.com/nmrony\ntip-tldr: In Javascript you can easily get the unix timestamp\n\ncategories:\n    - en\n---\n\nWe frequently need to calculate with unix timestamp. There are several ways to grab the timestamp. For current unix timestamp easiest and fastest way is\n\n```js\nconst dateTime = Date.now();\nconst timestamp = Math.floor(dateTime / 1000);\n```\nor\n\n```js\nconst dateTime = new Date().getTime();\nconst timestamp = Math.floor(dateTime / 1000);\n```\n\nTo get unix timestamp of a specific date pass `YYYY-MM-DD` or `YYYY-MM-DDT00:00:00Z` as parameter of `Date` constructor. For example\n\n```js\nconst dateTime = new Date('2012-06-08').getTime();\nconst timestamp = Math.floor(dateTime / 1000);\n```\nYou can just add a `+` sign also when declaring a `Date` object like below\n\n```js\nconst dateTime = +new Date();\nconst timestamp = Math.floor(dateTime / 1000);\n```\nor for specific date\n\n```js\nconst dateTime = +new Date('2012-06-08');\nconst timestamp = Math.floor(dateTime / 1000);\n```\nUnder the hood the runtime calls `valueOf` method of the `Date` object. Then the unary `+` operator calls `toNumber()` with that returned value. For detailed explanation please check the following links\n\n* [Date.prototype.valueOf](http://es5.github.io/#x15.9.5.8)\n* [Unary + operator](http://es5.github.io/#x11.4.6)\n* [toNumber()](http://es5.github.io/#x9.3)\n* [Date Javascript MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)\n* [Date.parse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse)\n"},"2016-03-03-helpful-console-log-hacks.md":{"name":"2016-03-03-helpful-console-log-hacks.md","sha":"e62a70f38deba0c0c865a9b689d491406e178cda","content":"---\r\nlayout: post\r\n\r\ntitle: Helpful Console Logging Tricks\r\ntip-number: 50\r\ntip-username: zackhall\r\ntip-username-profile: https://twitter.com/zthall\r\ntip-tldr: Helpful logging techniques using coercion and conditonal breakpoints.\r\n\r\ncategories:\r\n    - en\r\n---\r\n\r\n## Using conditional breakpoints to log data\r\n\r\nIf you wanted to log to the console a value each time a function is called, you can use conditional break points to do this. Open up your dev tools, find the function where you'd like to log data to the console and set a breakpoint with the following condition:\r\n\r\n```js\r\nconsole.log(data.value) && false\r\n```\r\n\r\nA conditional breakpoint pauses the page thread only if the condition for the breakpoint evaluates to true. So by using a condition like console.log('foo') && false it's guaranteed to evaluate to false since you're putting the literal false in the AND condition. So this will not pause the page thread when it's hit, but it will log data to the console. This can also be used to count how many times a function or callback is called.\r\n\r\nHere's how you can set a conditional breakpoint in [Edge](https://dev.windows.com/en-us/microsoft-edge/platform/documentation/f12-devtools-guide/debugger/#setting-and-managing-breakpoints \"Managing Breakpoints in Edge\"), [Chrome](https://developer.chrome.com/devtools/docs/javascript-debugging#breakpoints \"Managing Breakpoints in Chrome\"), [Firefox](https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Set_a_conditional_breakpoint \"Managing Breakpoints in Firefox\") and [Safari](https://developer.apple.com/library/mac/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/Debugger/Debugger.html \"Managing Breakpoints in Safari\").\r\n\r\n## Printing a function variable to console\r\n\r\nHave you ever logged a function variable to the console and weren't able to just view the function's code? The quickest way to see the function's code is to coerce it to a string using concatenation with an empty string.\r\n\r\n```js\r\nconsole.log(funcVariable + '');\r\n```"}}