{"2016-01-15-even-simpler-way-of-using-indexof-as-a-contains-clause.md":{"name":"2016-01-15-even-simpler-way-of-using-indexof-as-a-contains-clause.md","sha":"c8f8ab79026428ae1952fbb111b7ed16c2a86d90","content":"---\nlayout: post\n\ntitle: Even simpler way of using `indexOf` as a contains clause\ntip-number: 15\ntip-username: jhogoforbroke\ntip-username-profile: https://twitter.com/jhogoforbroke\ntip-tldr: JavaScript by default does not have a contains method. And for checking existence of a substring in a string or an item in an array you may do this.\n\ncategories:\n    - en\n---\n\nJavaScript by default does not have a contains method. And for checking existence of a substring in a string or an item in an array you may do this:\n\n```javascript\nvar someText = 'javascript rules';\nif (someText.indexOf('javascript') !== -1) {\n}\n\n// or\nif (someText.indexOf('javascript') >= 0) {\n}\n```\n\nBut let's look at these [Expressjs](https://github.com/strongloop/express) code snippets.\n\n[examples/mvc/lib/boot.js](https://github.com/strongloop/express/blob/2f8ac6726fa20ab5b4a05c112c886752868ac8ce/examples/mvc/lib/boot.js#L26)\n\n\n```javascript\nfor (var key in obj) {\n  // \"reserved\" exports\n  if (~['name', 'prefix', 'engine', 'before'].indexOf(key)) continue;\n```\n\n[lib/utils.js](https://github.com/strongloop/express/blob/2f8ac6726fa20ab5b4a05c112c886752868ac8ce/lib/utils.js#L93)\n\n\n```javascript\nexports.normalizeType = function(type){\n  return ~type.indexOf('/')\n    ? acceptParams(type)\n    : { value: mime.lookup(type), params: {} };\n};\n```\n\n[examples/web-service/index.js](https://github.com/strongloop/express/blob/2f8ac6726fa20ab5b4a05c112c886752868ac8ce/examples/web-service/index.js#L35)\n\n\n```javascript\n// key is invalid\nif (!~apiKeys.indexOf(key)) return next(error(401, 'invalid api key'));\n```\n\nThe gotcha is the [bitwise operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators) **~**, \"Bitwise operators perform their operations on binary representations, but they return standard JavaScript numerical values.\"\n\nIt transforms `-1` into `0`, and `0` evaluates to `false` in JavaScript:\n\n```javascript\nvar someText = 'text';\n!!~someText.indexOf('tex'); // someText contains \"tex\" - true\n!~someText.indexOf('tex'); // someText NOT contains \"tex\" - false\n~someText.indexOf('asd'); // someText doesn't contain \"asd\" - false\n~someText.indexOf('ext'); // someText contains \"ext\" - true\n```\n\n### String.prototype.includes()\n\nES6 introduced the [includes() method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes) and you can use it to determine whether or not a string includes another string:\n\n```javascript\n'something'.includes('thing'); // true\n```\n\nWith ECMAScript 2016 (ES7) it is even possible to use these techniques with Arrays:\n\n```javascript\n!!~[1, 2, 3].indexOf(1); // true\n[1, 2, 3].includes(1); // true\n```\n\n**Unfortunately, it is only supported in Chrome, Firefox, Safari 9 or above and Edge; not IE11 or lower.**\n**It's better used in controlled environments.**"},"2016-01-05-differences-between-undefined-and-null.md":{"name":"2016-01-05-differences-between-undefined-and-null.md","sha":"000c63604289125348863d024317b9e99c13c4d7","content":"---\nlayout: post\n\ntitle: Differences between `undefined` and `null`\ntip-number: 05\ntip-username: loverajoel \ntip-username-profile: https://github.com/loverajoel\ntip-tldr: Understanding the differences between `undefined` and `null`.\n\ncategories:\n    - en\n---\n\n- `undefined` means a variable has not been declared, or has been declared but has not yet been assigned a value\n- `null` is an assignment value that means \"no value\"\n- Javascript sets unassigned variables with a default value of `undefined`\n- Javascript never sets a value to `null`. It is used by programmers to indicate that a `var` has no value.\n- `undefined` is not valid in JSON while `null` is\n- `undefined` typeof is `undefined`\n- `null` typeof is an `object`. [Why?](http://www.2ality.com/2013/10/typeof-null.html)\n- Both are primitives\n- Both are [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy)\n  (`Boolean(undefined) // false`, `Boolean(null) // false`)\n- You can know if a variable is [undefined](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined)\n\n  ```javascript\n  typeof variable === \"undefined\"\n```\n- You can check if a variable is [null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null)\n\n  ```javascript\n  variable === null\n```\n- The **equality** operator considers them equal, but the **identity** doesn't\n\n  ```javascript\n  null == undefined // true\n\n  null === undefined // false\n```"},"2016-01-11-hoisting.md":{"name":"2016-01-11-hoisting.md","sha":"d3df70ede0fc50221e862cf95228b01dbeaf859a","content":"---\nlayout: post\n\ntitle: Hoisting\ntip-number: 11\ntip-username: squizzleflip\ntip-username-profile: https://twitter.com/squizzleflip\ntip-tldr: JavaScript modules and build steps are getting more numerous and complicated, but what about boilerplate in new frameworks?\n\ncategories:\n    - en\n---\n\nUnderstanding [hoisting](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#var_hoisting) will help you organize your function scope. Just remember, variable declarations and function definitions are hoisted to the top. Variable definitions are not, even if you declare and define a variable on the same line. Also, a variable **declaration** lets the system know that the variable exists while **definition** assigns it a value.\n\n```javascript\nfunction doTheThing() {\n  // ReferenceError: notDeclared is not defined\n  console.log(notDeclared);\n\n  // Outputs: undefined\n  console.log(definedLater);\n  var definedLater;\n\n  definedLater = 'I am defined!'\n  // Outputs: 'I am defined!'\n  console.log(definedLater)\n\n  // Outputs: undefined\n  console.log(definedSimulateneously);\n  var definedSimulateneously = 'I am defined!'\n  // Outputs: 'I am defined!'\n  console.log(definedSimulateneously)\n\n  // Outputs: 'I did it!'\n  doSomethingElse();\n\n  function doSomethingElse(){\n    console.log('I did it!');\n  }\n\n  // TypeError: undefined is not a function\n  functionVar();\n\n  var functionVar = function(){\n    console.log('I did it!');\n  }\n}\n```\n\nTo make things easier to read, declare all of your variables at the top of your function scope so it is clear which scope the variables are coming from. Define your variables before you need to use them. Define your functions at the bottom of your scope to keep them out of your way."},"2016-01-19-safe-string-concatenation.md":{"name":"2016-01-19-safe-string-concatenation.md","sha":"979d865b9ea9c42cfe2399da51657dc2dd634973","content":"---\nlayout: post\n\ntitle: Safe string concatenation\ntip-number: 19\ntip-username: gogainda\ntip-username-profile: https://twitter.com/gogainda\ntip-tldr: Suppose you have a couple of variables with unknown types and you want to concatenate them in a string. To be sure that the arithmetical operation is not be applied during concatenation, use concat\n\ncategories:\n    - en\n---\n\nSuppose you have a couple of variables with unknown types and you want to concatenate them in a string. To be sure that the arithmetical operation is not be applied during concatenation, use `concat`:\n\n```javascript\nvar one = 1;\nvar two = 2;\nvar three = '3';\n\nvar result = ''.concat(one, two, three); //\"123\"\n```\n\nThis way of concatenting does exactly what you'd expect. In contrast, concatenation with pluses might lead to unexpected results:\n\n```javascript\nvar one = 1;\nvar two = 2;\nvar three = '3';\n\nvar result = one + two + three; //\"33\" instead of \"123\"\n```\n\nSpeaking about performance, compared to the `join` [type](http://www.sitepoint.com/javascript-fast-string-concatenation/) of concatenation, the speed of `concat` is pretty much the same.\n\nYou can read more about the `concat` function on MDN [page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat)."},"2016-01-17-nodejs-run-a-module-if-it-is-not-required.md":{"name":"2016-01-17-nodejs-run-a-module-if-it-is-not-required.md","sha":"41a2a8878931ba15f837953a6a370cafab555d36","content":"---\nlayout: post\n\ntitle: Node.js - Run a module if it is not `required`\ntip-number: 17\ntip-username: odsdq\ntip-username-profile: https://twitter.com/odsdq\ntip-tldr: In node, you can tell your program to do two different things depending on whether the code is run from `require('./something.js')` or `node something.js`. This is useful if you want to interact with one of your modules independently.\n\ncategories:\n    - en\n---\n\nIn node, you can tell your program to do two different things depending on whether the code is run from `require('./something.js')` or `node something.js`.  This is useful if you want to interact with one of your modules independently.\n\n```js\nif (!module.parent) {\n    // ran with `node something.js`\n    app.listen(8088, function() {\n        console.log('app listening on port 8088');\n    })\n} else {\n    // used with `require('/.something.js')`\n    module.exports = app;\n}\n```\n\nSee [the documentation for modules](https://nodejs.org/api/modules.html#modules_module_parent) for more info."},"2016-01-07-use-strict-and-get-lazy.md":{"name":"2016-01-07-use-strict-and-get-lazy.md","sha":"7f61188cfb8084ec232f4c7fd806eafa6891f25e","content":"---\nlayout: post\n\ntitle: use strict and get lazy\ntip-number: 07\ntip-username: nainslie\ntip-username-profile: https://twitter.com/nat5an\ntip-tldr: Strict-mode JavaScript makes it easier for the developer to write \"secure\" JavaScript.\n\ncategories:\n    - en\n---\n\nStrict-mode JavaScript makes it easier for the developer to write \"secure\" JavaScript.\n\nBy default, JavaScript allows the programmer to be pretty careless, for example, by not requiring us to declare our variables with \"var\" when we first introduce them.  While this may seem like a convenience to the unseasoned developer, it's also the source of many errors when a variable name is misspelled or accidentally referred to out of its scope.\n\nProgrammers like to make the computer do the boring stuff for us, and automatically check our work for mistakes. That's what the JavaScript \"use strict\" directive allows us to do, by turning our mistakes into JavaScript errors.\n\nWe add this directive either by adding it at the top of a js file:\n\n```javascript\n// Whole-script strict mode syntax\n\"use strict\";\nvar v = \"Hi!  I'm a strict mode script!\";\n```\n\nor inside a function:\n\n```javascript\nfunction f()\n{\n  // Function-level strict mode syntax\n  'use strict';\n  function nested() { return \"And so am I!\"; }\n  return \"Hi!  I'm a strict mode function!  \" + nested();\n}\nfunction f2() { return \"I'm not strict.\"; }\n```\n\nBy including this directive in a JavaScript file or function, we will direct the JavaScript engine to execute in strict mode which disables a bunch of behaviors that are usually undesirable in larger JavaScript projects.  Among other things, strict mode changes the following behaviors:\n\n* Variables can only be introduced when they are preceded with \"var\"\n* Attempting to write to read-only properties generates a noisy error\n* You have to call constructors with the \"new\" keyword\n* \"this\" is not implicitly bound to the global object\n* Very limited use of eval() allowed\n* Protects you from using reserved words or future reserved words as variable names\n\nStrict mode is great for new projects, but can be challenging to introduce into older projects that don't already use it in most places.  It also can be problematic if your build chain concatenates all your js files into one big file, as this may cause all files to execute in strict mode.\n\nIt is not a statement, but a literal expression, ignored by earlier versions of JavaScript.\nStrict mode is supported in:\n\n* Internet Explorer from version 10.\n* Firefox from version 4.\n* Chrome from version 13.\n* Safari from version 5.1.\n* Opera from version 12.\n\n[See MDN for a fuller description of strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)."},"2016-01-21-shuffle-an-array.md":{"name":"2016-01-21-shuffle-an-array.md","sha":"d18d9ef909c4aa75190d258e12192a3a61d1c84a","content":"---\nlayout: post\n\ntitle: Shuffle an Array\ntip-number: 21\ntip-username: 0xmtn\ntip-username-profile: https://github.com/0xmtn/\ntip-tldr: Fisher-Yates Shuffling it's an algorithm to shuffle an array.\n\ncategories:\n    - en\n---\n\n This snippet here uses [Fisher-Yates Shuffling](https://www.wikiwand.com/en/Fisher%E2%80%93Yates_shuffle) Algorithm to shuffle a given array.\n\n```javascript\nfunction shuffle(arr) {\n    var i,\n        j,\n        temp;\n    for (i = arr.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n    return arr;    \n};\n```\nAn example:\n\n```javascript\nvar a = [1, 2, 3, 4, 5, 6, 7, 8];\nvar b = shuffle(a);\nconsole.log(b);\n// [2, 7, 8, 6, 5, 3, 1, 4]\n```"},"2016-01-23-converting-to-number-fast-way.md":{"name":"2016-01-23-converting-to-number-fast-way.md","sha":"2899bd9a1afc402ad27ee8ff0d767745d79cd68d","content":"---\nlayout: post\n\ntitle: Converting to number fast way\ntip-number: 23\ntip-username: sonnyt\ntip-username-profile: http://twitter.com/sonnyt\ntip-tldr: Converting strings to numbers is extremely common. The easiest and fastest way to achieve that would be using the + operator.\n\ncategories:\n    - en\n---\n\nConverting strings to numbers is extremely common. The easiest and fastest ([jsPref](https://jsperf.com/number-vs-parseint-vs-plus/29)) way to achieve that would be using the `+` (plus) operator.\n\n```javascript\nvar one = '1';\n\nvar numberOne = +one; // Number 1\n```\n\nYou can also use the `-` (minus) operator which type-converts the value into number but also negates it.\n\n```javascript\nvar one = '1';\n\nvar negativeNumberOne = -one; // Number -1\n```"},"2016-01-20-return-objects-to-enable-chaining-of-functions.md":{"name":"2016-01-20-return-objects-to-enable-chaining-of-functions.md","sha":"e985f7fe04837683a9ea212a98da8fa7f706ab39","content":"---\nlayout: post\n\ntitle: Return objects to enable chaining of functions\ntip-number: 20\ntip-username: WakeskaterX\ntip-username-profile: https://twitter.com/WakeStudio\ntip-tldr: When creating functions on an object in Object Oriented Javascript, returning the object in the function will enable you to chain functions together.\n\ncategories:\n    - en\n---\n\nWhen creating functions on an object in Object Oriented Javascript, returning the object in the function will enable you to chain functions together.\n\n```js\nfunction Person(name) {\n  this.name = name;\n\n  this.sayName = function() {\n    console.log(\"Hello my name is: \", this.name);\n    return this;\n  };\n\n  this.changeName = function(name) {\n    this.name = name;\n    return this;\n  };\n}\n\nvar person = new Person(\"John\");\nperson.sayName().changeName(\"Timmy\").sayName();\n```"},"2016-01-24-use_===_instead_of_==.md":{"name":"2016-01-24-use_===_instead_of_==.md","sha":"a1984e549be2d709dab42d3982df8bf3ff23a81e","content":"---\nlayout: post\n\ntitle: Use === instead of ==\ntip-number: 24\ntip-username: bhaskarmelkani\ntip-username-profile: https://www.twitter.com/bhaskarmelkani\ntip-tldr: The `==` (or `!=`) operator performs an automatic type conversion if needed. The `===` (or `!==`) operator will not perform any conversion. It compares the value and the type, which could be considered faster ([jsPref](http://jsperf.com/strictcompare)) than `==`.\n\ncategories:\n    - en\n---\n\nThe `==` (or `!=`) operator performs an automatic type conversion if needed. The `===` (or `!==`) operator will not perform any conversion. It compares the value and the type, which could be considered faster ([jsPref](http://jsperf.com/strictcompare)) than `==`.\n\n```js\n[10] ==  10      // is true\n[10] === 10      // is false\n\n'10' ==  10      // is true\n'10' === 10      // is false\n\n []  ==  0       // is true\n []  === 0       // is false\n\n ''  ==  false   // is true but true == \"a\" is false\n ''  === false   // is false \n\n```\n"},"2016-01-13-tip-to-measure-performance-of-a-javascript-block.md":{"name":"2016-01-13-tip-to-measure-performance-of-a-javascript-block.md","sha":"a75ecdeb05579e9f31be8f3b9fad1f53b1a2b149","content":"---\nlayout: post\n\ntitle: Tip to measure performance of a javascript block\ntip-number: 13\ntip-username: manmadareddy\ntip-username-profile: https://twitter.com/manmadareddy\ntip-tldr: For quickly measuring performance of a javascript block, we can use the console functions like `console.time(label)` and `console.timeEnd(label)`\n\ncategories:\n    - en\n---\n\nFor quickly measuring performance of a javascript block, we can use the console functions like\n[`console.time(label)`](https://developer.chrome.com/devtools/docs/console-api#consoletimelabel) and [`console.timeEnd(label)`](https://developer.chrome.com/devtools/docs/console-api#consoletimeendlabel)\n\n```javascript\nconsole.time(\"Array initialize\");\nvar arr = new Array(100),\n    len = arr.length,\n    i;\n\nfor (i = 0; i < len; i++) {\n    arr[i] = new Object();\n};\nconsole.timeEnd(\"Array initialize\"); // Outputs: Array initialize: 0.711ms\n```\n\nMore info:\n[Console object](https://github.com/DeveloperToolsWG/console-object),\n[Javascript benchmarking](https://mathiasbynens.be/notes/javascript-benchmarking)\n\nDemo: [jsfiddle](https://jsfiddle.net/meottb62/) - [codepen](http://codepen.io/anon/pen/JGJPoa) (outputs in browser console)"},"2016-01-01-angularjs-digest-vs-apply.md":{"name":"2016-01-01-angularjs-digest-vs-apply.md","sha":"e5f32fc7949aba8fca0834ae3f742548231a3f6e","content":"---\nlayout: post\n\ntitle: AngularJs - `$digest` vs `$apply`\ntip-number: 01\ntip-username: loverajoel \ntip-username-profile: https://github.com/loverajoel\ntip-tldr: JavaScript modules and build steps are getting more numerous and complicated, but what about boilerplate in new frameworks?\n\ncategories:\n    - en\n---\n\nOne of the most appreciated features of AngularJs is the two-way data binding. In order to make this work AngularJs evaluates the changes between the model and the view through cycles(`$digest`). You need to understand this concept in order to understand how the framework works under the hood.\n\nAngular evaluates each watcher whenever one event is fired. This is the known `$digest` cycle.\nSometimes you have to force it to run a new cycle manually and you must choose the correct option because this phase is one of the most influential in terms of performance.\n\n### `$apply`\nThis core method lets you to start the digestion cycle explicitly. That means that all watchers are checked; the entire application starts the `$digest loop`. Internally, after executing an optional function parameter, it calls `$rootScope.$digest();`.\n\n### `$digest`\nIn this case the `$digest` method starts the `$digest` cycle for the current scope and its children. You should notice that the parent's scopes will not be checked.\n and not be affected.\n\n### Recommendations\n- Use `$apply` or `$digest` only when browser DOM events have triggered outside of AngularJS.\n- Pass a function expression to `$apply`, this has an error handling mechanism and allows integrating changes in the digest cycle.\n\n```javascript\n$scope.$apply(() => {\n\t$scope.tip = 'Javascript Tip';\n});\n```\n\n- If you only need to update the current scope or its children, use `$digest`, and prevent a new digest cycle for the whole application. The performance benefit is self-evident.\n- `$apply()` is a hard process for the machine and can lead to performance issues when there is a lot of binding.\n- If you are using >AngularJS 1.2.X, use `$evalAsync`, which is a core method that will evaluate the expression during the current cycle or the next. This can improve your application's performance."},"2016-01-09-template-strings.md":{"name":"2016-01-09-template-strings.md","sha":"010f340ff175a198b1e537fecbd66acba7c0c0a8","content":"---\nlayout: post\n\ntitle: Template Strings\ntip-number: 09\ntip-username: JakeRawr\ntip-username-profile: https://github.com/JakeRawr\ntip-tldr: As of ES6, JS now has template strings as an alternative to the classic end quotes strings.\n\ncategories:\n    - en\n---\n\nAs of ES6, JS now has template strings as an alternative to the classic end quotes strings.\n\nEx:\nNormal string\n\n```javascript\nvar firstName = 'Jake';\nvar lastName = 'Rawr';\nconsole.log('My name is ' + firstName + ' ' + lastName);\n// My name is Jake Rawr\n```\nTemplate String\n\n```javascript\nvar firstName = 'Jake';\nvar lastName = 'Rawr';\nconsole.log(`My name is ${firstName} ${lastName}`);\n// My name is Jake Rawr\n```\n\nYou can do multi-line strings without `\\n` and simple logic (ie 2+3) inside `${}` in template strings.\n\nYou are also able to to modify the output of template strings using a function; they are called [tagged template strings]\n(https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings#Tagged_template_strings) for example usages of tagged template strings.\n\nYou may also want to [read](https://hacks.mozilla.org/2015/05/es6-in-depth-template-strings-2) to understand template strings more."},"2016-01-04-sorting-strings-with-accented-characters.md":{"name":"2016-01-04-sorting-strings-with-accented-characters.md","sha":"6876149246d747b106a65bd585065e7e801f52c0","content":"---\nlayout: post\n\ntitle: Sorting strings with accented characters\ntip-number: 04\ntip-username: loverajoel \ntip-username-profile: https://github.com/loverajoel\ntip-tldr: Javascript has a native method **sort** that allows sorting arrays. Doing a simple `array.sort()` will treat each array entry as a string and sort it alphabetically. But when you try order an array of non ASCII characters you will obtain a strange result.\n\ncategories:\n    - en\n---\n\nJavascript has a native method **[sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)** that allows sorting arrays. Doing a simple `array.sort()` will treat each array entry as a string and sort it alphabetically. Also you can provide your [own custom sorting](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters) function.\n\n```javascript\n['Shanghai', 'New York', 'Mumbai', 'Buenos Aires'].sort();\n// [\"Buenos Aires\", \"Mumbai\", \"New York\", \"Shanghai\"]\n```\n\nBut when you try order an array of non ASCII characters like this `['é', 'a', 'ú', 'c']`, you will obtain a strange result `['c', 'e', 'á', 'ú']`. That happens because sort works only with the English language.\n\nSee the next example:\n\n```javascript\n// Spanish\n['único','árbol', 'cosas', 'fútbol'].sort();\n// [\"cosas\", \"fútbol\", \"árbol\", \"único\"] // bad order\n\n// German\n['Woche', 'wöchentlich', 'wäre', 'Wann'].sort();\n// [\"Wann\", \"Woche\", \"wäre\", \"wöchentlich\"] // bad order\n```\n\nFortunately, there are two ways to overcome this behavior [localeCompare](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare) and [Intl.Collator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator) provided by ECMAScript Internationalization API.\n\n> Both methods have their own custom parameters in order to configure it to work adequately.\n\n### Using `localeCompare()`\n\n```javascript\n['único','árbol', 'cosas', 'fútbol'].sort(function (a, b) {\n  return a.localeCompare(b);\n});\n// [\"árbol\", \"cosas\", \"fútbol\", \"único\"]\n\n['Woche', 'wöchentlich', 'wäre', 'Wann'].sort(function (a, b) {\n  return a.localeCompare(b);\n});\n// [\"Wann\", \"wäre\", \"Woche\", \"wöchentlich\"]\n```\n\n### Using `Intl.Collator()`\n\n```javascript\n['único','árbol', 'cosas', 'fútbol'].sort(Intl.Collator().compare);\n// [\"árbol\", \"cosas\", \"fútbol\", \"único\"]\n\n['Woche', 'wöchentlich', 'wäre', 'Wann'].sort(Intl.Collator().compare);\n// [\"Wann\", \"wäre\", \"Woche\", \"wöchentlich\"]\n```\n\n- For each method you can customize the location.\n- According to [Firefox](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare#Performance) Intl.Collator is faster when comparing large numbers of strings.\n\nSo when you are working with arrays of strings in a language other than English, remember to use this method to avoid unexpected sorting."},"2016-01-22-two-ways-to-empty-an-array.md":{"name":"2016-01-22-two-ways-to-empty-an-array.md","sha":"045edbda8eff051367d4d40ba846dfbdf39f47b8","content":"---\nlayout: post\n\ntitle: Two ways to empty an array\ntip-number: 22\ntip-username: microlv\ntip-username-profile: https://github.com/microlv\ntip-tldr: In JavaScript when you want to empty an array, there are a lot ways, but this is the most performant.\n\ncategories:\n    - en\n---\n\nYou define an array and want to empty its contents.\nUsually, you would do it like this:\n\n```javascript\n// define Array\nvar list = [1, 2, 3, 4];\nfunction empty() {\n    //empty your array\n    list = [];\n}\nempty();\n```\nBut there is another way to empty an array that is more performant.\n\nYou should use code like this:\n\n```javascript\nvar list = [1, 2, 3, 4];\nfunction empty() {\n    //empty your array\n    list.length = 0;\n}\nempty();\n```\n\n* `list = []` assigns a reference to a new array to a variable, while any other references are unaffected.\nwhich means that references to the contents of the previous array are still kept in memory, leading to memory leaks.\n\n* `list.length = 0` deletes everything in the array, which does hit other references.\n\nIn other words, if you have two references to the same array (`a = [1,2,3]; a2 = a;`), and you delete the array's contents using `list.length = 0`, both references (a and a2) will now point to the same empty array. (So don't use this technique if you don't want a2 to hold an empty array!)\n\nThink about what this will output:\n\n```js\nvar foo = [1,2,3];\nvar bar = [1,2,3];\nvar foo2 = foo;\nvar bar2 = bar;\nfoo = [];\nbar.length = 0;\nconsole.log(foo, bar, foo2, bar2);\n\n// [] [] [1, 2, 3] []\n```\n\nStackoverflow more detail:\n[difference-between-array-length-0-and-array](http://stackoverflow.com/questions/4804235/difference-between-array-length-0-and-array)\n"},"2016-01-08-converting-a-node-list-to-an-array.md":{"name":"2016-01-08-converting-a-node-list-to-an-array.md","sha":"e3860e8a42a8d54e6a3cbd074b44c22045ec51bf","content":"---\nlayout: post\n\ntitle: Converting a Node List to an Array\ntip-number: 08\ntip-username: Tevko\ntip-username-profile: https://twitter.com/tevko\ntip-tldr: Here's a quick, safe, and reusable way to convert a node list into an array of DOM elements.\n\ncategories:\n    - en\n---\n\nThe `querySelectorAll` method returns an array-like object called a node list. These data structures are referred to as \"Array-like\", because they appear as an array, but can not be used with array methods like `map` and `forEach`. Here's a quick, safe, and reusable way to convert a node list into an array of DOM elements:\n\n```javascript\nconst nodelist = document.querySelectorAll('div');\nconst nodelistToArray = Array.apply(null, nodelist);\n\n//later on ..\n\nnodelistToArray.forEach(...);\nnodelistToArray.map(...);\nnodelistToArray.slice(...);\n\n//etc...\n```\n\nThe `apply` method is used to pass an array of arguments to a function with a given `this` value. [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply) states that `apply` will take an array-like object, which is exactly what `querySelectorAll` returns. Since we don't need to specify a value for `this` in the context of the function, we pass in `null` or `0`. The result is an actual array of DOM elements which contains all of the available array methods.\n\nOr if you are using ES2015 you can use the [spread operator `...`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator)\n\n```js\nconst nodelist = [...document.querySelectorAll('div')]; // returns a real array\n\n//later on ..\n\nnodelist.forEach(...);\nnodelist.map(...);\nnodelist.slice(...);\n\n//etc...\n```"},"2016-01-18-rounding-the-fast-way.md":{"name":"2016-01-18-rounding-the-fast-way.md","sha":"ca07e0deaff03c8394201d1ac3a0fba1918ca56d","content":"---\nlayout: post\n\ntitle: Rounding the fast way\ntip-number: 18\ntip-username: pklinger\ntip-username-profile: https://github.com/pklinger\ntip-tldr: Today's tip is about performance. Ever came across the double tilde `~~` operator? It is sometimes also called the double NOT bitwise operator. You can use it as a faster substitute for `Math.floor()`. Why is that?\n\ncategories:\n    - en\n---\n\nToday's tip is about performance. [Ever came across the double tilde] (http://stackoverflow.com/questions/5971645/what-is-the-double-tilde-operator-in-javascript) `~~` operator? It is sometimes also called the double NOT bitwise operator. You can use it as a faster substitute for `Math.floor()`. Why is that?\n\nOne bitwise shift `~` transforms the 32 bit converted input into `-(input+1)`. The double bitwise shift therefore transforms the input into `-(-(input + 1)+1)` making it a great tool to round towards 0. For numeric input, it therefore mimics the `Math.ceil()` for negative and `Math.floor()` for positive input. On failure, `0` is returned, which might come in handy sometimes instead of `Math.floor()`, which returns a value of `NaN` on failure.\n\n```javascript\n// single ~\nconsole.log(~1337)    // -1338\n\n// numeric input\nconsole.log(~~47.11)  // -> 47\nconsole.log(~~-12.88) // -> -12\nconsole.log(~~1.9999) // -> 1\nconsole.log(~~3)      // -> 3\n\n// on failure\nconsole.log(~~[]) // -> 0\nconsole.log(~~NaN)  // -> 0\nconsole.log(~~null) // -> 0\n\n// greater than 32 bit integer fails\nconsole.log(~~(2147483647 + 1) === (2147483647 + 1)) // -> 0\n```\n\nAlthough `~~` may perform better, for the sake of readability please use `Math.floor()`."},"2016-01-06-writing-a-single-method-for-arrays-and-a-single-element.md":{"name":"2016-01-06-writing-a-single-method-for-arrays-and-a-single-element.md","sha":"ee3bd8c9b5996bdc6b8ad594a1c61f869b97d3fc","content":"---\nlayout: post\n\ntitle: Writing a single method for arrays and a single element\ntip-number: 06\ntip-username: mattfxyz\ntip-username-profile: https://twitter.com/mattfxyz\ntip-tldr: Rather than writing separate methods to handle an array and a single element parameter, write your functions so they can handle both. This is similar to how some of jQuery's functions work (`css` will modify everything matched by the selector).\n\ncategories:\n    - en\n---\n\nRather than writing separate methods to handle an array and a single element parameter, write your functions so they can handle both. This is similar to how some of jQuery's functions work (`css` will modify everything matched by the selector).\n\nYou just have to concat everything into an array first. `Array.concat` will accept an array or a single element.\n\n```javascript\nfunction printUpperCase(words) {\n  var elements = [].concat(words);\n  for (var i = 0; i < elements.length; i++) {\n    console.log(elements[i].toUpperCase());\n  }\n}\n```\n\n`printUpperCase` is now ready to accept a single node or an array of nodes as its parameter.\n\n```javascript\nprintUpperCase(\"cactus\");\n// => CACTUS\nprintUpperCase([\"cactus\", \"bear\", \"potato\"]);\n// => CACTUS\n//  BEAR\n//  POTATO\n```\n"},"2016-01-12-pseudomandatory-parameters-in-es6-functions.md":{"name":"2016-01-12-pseudomandatory-parameters-in-es6-functions.md","sha":"4021f4bb04f64c76ea7c1848bdd1a72a9de122c5","content":"---\nlayout: post\n\ntitle: Pseudomandatory parameters in ES6 functions\ntip-number: 12\ntip-username: Avraam Mavridis\ntip-username-profile: https://github.com/AvraamMavridis\ntip-tldr: In many programming languages the parameters of a function are by default mandatory and the developer has to explicitly define that a parameter is optional.\n\ncategories:\n    - en\n---\n\nIn many programming languages the parameters of a function are by default mandatory and the developer has to explicitly define that a parameter is optional. In Javascript, every parameter is optional, but we can enforce this behavior without messing with the actual body of a function, taking advantage of [**es6's default values for parameters**] (http://exploringjs.com/es6/ch_parameter-handling.html#sec_parameter-default-values) feature.\n\n```javascript\nconst _err = function( message ){\n  throw new Error( message );\n}\n\nconst getSum = (a = _err('a is not defined'), b = _err('b is not defined')) => a + b\n\ngetSum( 10 ) // throws Error, b is not defined\ngetSum( undefined, 10 ) // throws Error, a is not defined\n ```\n\n `_err` is a function that immediately throws an Error. If no value is passed for one of the parameters, the default value is going to be used, `_err` will be called and an Error will be thrown. You can see more examples for the **default parameters feature** on [Mozilla's Developer Network ](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/default_parameters)"},"2016-01-02-keys-in-children-components-are-important.md":{"name":"2016-01-02-keys-in-children-components-are-important.md","sha":"4a1f5866f16bfa51160ffc11223087c70b57531a","content":"---\nlayout: post\n\ntitle: Keys in children components are important\ntip-number: 02\ntip-username: loverajoel \ntip-username-profile: https://github.com/loverajoel\ntip-tldr: The key is an attribute that you must pass to all components created dynamically from an array. It's a unique and constant id that React uses to identify each component in the DOM and to know whether it's a different component or the same one. Using keys ensures that the child component is preserved and not recreated and prevents weird things from happening.\n\ncategories:\n    - en\n---\n\nThe [key](https://facebook.github.io/react/docs/multiple-components.html#dynamic-children) is an attribute that you must pass to all components created dynamically from an array. It's a unique and constant id that React uses to identify each component in the DOM and to know whether it's a different component or the same one. Using keys ensures that the child component is preserved and not recreated and prevents weird things from happening.\n\n> Key is not really about performance, it's more about identity (which in turn leads to better performance). Randomly assigned and changing values do not form an identity [Paul O’Shannessy](https://github.com/facebook/react/issues/1342#issuecomment-39230939)\n\n- Use an existing unique value of the object.\n- Define the keys in the parent components, not in child components\n\n```javascript\n//bad\n...\nrender() {\n\t<div key={{item.key}}>{{item.name}}</div>\n}\n...\n\n//good\n<MyComponent key={{item.key}}/>\n```\n- [Using array index is a bad practice.](https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318#.76co046o9)\n- `random()` will not work\n\n```javascript\n//bad\n<MyComponent key={{Math.random()}}/>\n```\n\n- You can create your own unique id. Be sure that the method is fast and attach it to your object.\n- When the number of children is large or contains expensive components, use keys to improve performance.\n- [You must provide the key attribute for all children of ReactCSSTransitionGroup.](http://docs.reactjs-china.com/react/docs/animation.html)"},"2016-01-16-passing-arguments-to-callback-functions.md":{"name":"2016-01-16-passing-arguments-to-callback-functions.md","sha":"e7b48662d690545b93a19039d9dcfd8b80a03ecd","content":"---\nlayout: post\n\ntitle: Passing arguments to callback functions\ntip-number: 16\ntip-username: minhazav\ntip-username-profile: https://twitter.com/minhazav\ntip-tldr: JavaScript modules and build steps are getting more numerous and complicated, but what about boilerplate in new frameworks?\n\ncategories:\n    - en\n---\n\nBy default you cannot pass arguments to a callback function. For example:\n\n```js\nfunction callback() {\n  console.log('Hi human');\n}\n\ndocument.getElementById('someelem').addEventListener('click', callback);\n\n```\n\nYou can take advantage of the closure scope in Javascript to pass arguments to callback functions. Check this example:\n\n```js\nfunction callback(a, b) {\n  return function() {\n    console.log('sum = ', (a+b));\n  }\n}\n\nvar x = 1, y = 2;\ndocument.getElementById('someelem').addEventListener('click', callback(x, y));\n\n```\n\n### What are closures?\n\nClosures are functions that refer to independent (free) variables. In other words, the function defined in the closure 'remembers' the environment in which it was created. [Check MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) to learn more.\n\nSo this way the arguments `x` and `y` are in scope of the callback function when it is called.\n\nAnother method to do this is using the `bind` method. For example:\n\n```js\nvar alertText = function(text) {\n  alert(text);\n};\n\ndocument.getElementById('someelem').addEventListener('click', alertText.bind(this, 'hello'));\n```\nThere is a very slight difference in performance of both methods, checkout [jsperf](http://jsperf.com/bind-vs-closure-23).\n"},"2016-01-03-improve-nested-conditionals.md":{"name":"2016-01-03-improve-nested-conditionals.md","sha":"e68a37c322a75388ac6b98a861c27983e2ab3d48","content":"---\nlayout: post\n\ntitle: Improve Nested Conditionals\ntip-number: 03\ntip-username: AlbertoFuente \ntip-username-profile: https://github.com/AlbertoFuente\ntip-tldr: How can we improve and make a more efficient nested `if` statement in javascript?\n\ncategories:\n    - en\n---\n\nHow can we improve and make a more efficient nested `if` statement in javascript?\n\n```javascript\nif (color) {\n  if (color === 'black') {\n    printBlackBackground();\n  } else if (color === 'red') {\n    printRedBackground();\n  } else if (color === 'blue') {\n    printBlueBackground();\n  } else if (color === 'green') {\n    printGreenBackground();\n  } else {\n    printYellowBackground();\n  }\n}\n```\n\nOne way to improve the nested `if` statement would be using the `switch` statement. Although it is less verbose and is more ordered, it's not recommended to use it because it's so difficult to debug errors. Here's [why](https://toddmotto.com/deprecating-the-switch-statement-for-object-literals/).\n\n```javascript\nswitch(color) {\n  case 'black':\n    printBlackBackground();\n    break;\n  case 'red':\n    printRedBackground();\n    break;\n  case 'blue':\n    printBlueBackground();\n    break;\n  case 'green':\n    printGreenBackground();\n    break;\n  default:\n    printYellowBackground();\n}\n```\n\nBut what if we have a conditional with several checks in each statement? In this case, if we want it less verbose and more ordered, we can use the conditional `switch`.\nIf we pass `true` as a parameter to the `switch` statement, it allows us to put a conditional in each case.\n\n```javascript\nswitch(true) {\n  case (typeof color === 'string' && color === 'black'):\n    printBlackBackground();\n    break;\n  case (typeof color === 'string' && color === 'red'):\n    printRedBackground();\n    break;\n  case (typeof color === 'string' && color === 'blue'):\n    printBlueBackground();\n    break;\n  case (typeof color === 'string' && color === 'green'):\n    printGreenBackground();\n    break;\n  case (typeof color === 'string' && color === 'yellow'):\n    printYellowBackground();\n    break;\n}\n```\n\nBut we must always avoid having several checks in every condition and avoid using `switch` as much as possible. We also must take into account that the most efficient way to do this is through an `object`.\n\n```javascript\nvar colorObj = {\n  'black': printBlackBackground,\n  'red': printRedBackground,\n  'blue': printBlueBackground,\n  'green': printGreenBackground,\n  'yellow': printYellowBackground\n};\n\nif (color in colorObj) {\n  colorObj[color]();\n}\n```\n\nHere you can find more information about [this](http://www.nicoespeon.com/en/2015/01/oop-revisited-switch-in-js/).\n"},"2016-01-10-check-if-a-property-is-in-a-object.md":{"name":"2016-01-10-check-if-a-property-is-in-a-object.md","sha":"9ceaca4a32aaa4bdfb6fd67041337e485292d87f","content":"---\nlayout: post\n\ntitle: Check if a property is in a Object\ntip-number: 10\ntip-username: loverajoel\ntip-username-profile: https://www.twitter.com/loverajoel\ntip-tldr: These are ways to check if a property is present in an object.\n\ncategories:\n    - en\n---\n\nWhen you have to check if a property is present in an [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects), you probably are doing something like this:\n\n```javascript\nvar myObject = {\n  name: '@tips_js'\n};\n\nif (myObject.name) { ... }\n\n```\n\nThat's ok, but you have to know that there are two native ways for this kind of thing, the [`in` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in) and [`Object.hasOwnProperty`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty). Every object descended from `Object`, has both ways available.\n\n### See the big Difference\n\n```javascript\nvar myObject = {\n  name: '@tips_js'\n};\n\nmyObject.hasOwnProperty('name'); // true\n'name' in myObject; // true\n\nmyObject.hasOwnProperty('valueOf'); // false, valueOf is inherited from the prototype chain\n'valueOf' in myObject; // true\n\n```\n\nBoth differ in the depth at which they check the properties. In other words, `hasOwnProperty` will only return true if key is available on that object directly. However, the `in` operator doesn't discriminate between properties created on an object and properties inherited from the prototype chain.\n\nHere's another example:\n\n```javascript\nvar myFunc = function() {\n  this.name = '@tips_js';\n};\nmyFunc.prototype.age = '10 days';\n\nvar user = new myFunc();\n\nuser.hasOwnProperty('name'); // true\nuser.hasOwnProperty('age'); // false, because age is from the prototype chain\n```\n\nCheck the [live examples here](https://jsbin.com/tecoqa/edit?js,console)!\n\nI also recommend reading [this discussion](https://github.com/loverajoel/jstips/issues/62) about common mistakes made when checking a property's existence in objects."},"2015-12-29-insert-item-inside-an-array.md":{"name":"2015-12-29-insert-item-inside-an-array.md","sha":"f9c86fbfb7bc7bdddb9d1af11dd335e6ede8595a","content":"---\nlayout: post\n\ntitle: Insert item inside an Array\ntip-number: 00\ntip-username: loverajoel \ntip-username-profile: https://github.com/loverajoel\ntip-tldr: Inserting an item into an existing array is a daily common task. You can add elements to the end of an array using push, to the beginning using unshift, or to the middle using splice.\n\n\ncategories:\n    - en\n---\n\nInserting an item into an existing array is a daily common task. You can add elements to the end of an array using push, to the beginning using unshift, or to the middle using splice.\n\nThose are known methods, but it doesn't mean there isn't a more performant way. Here we go:\n\nAdding an element at the end of the array is easy with push(), but there is a more performant way.\n\n```javascript\nvar arr = [1,2,3,4,5];\n\narr.push(6);\narr[arr.length] = 6; // 43% faster in Chrome 47.0.2526.106 on Mac OS X 10.11.1\n```\nBoth methods modify the original array. Don't believe me? Check the [jsperf](http://jsperf.com/push-item-inside-an-array)\n\nNow if we are trying to add an item to the beginning of the array:\n\n```javascript\nvar arr = [1,2,3,4,5];\n\narr.unshift(0);\n[0].concat(arr); // 98% faster in Chrome 47.0.2526.106 on Mac OS X 10.11.1\n```\nHere is a little more detail: unshift edits the original array; concat returns a new array. [jsperf](http://jsperf.com/unshift-item-inside-an-array)\n\nAdding items in the middle of an array is easy with splice, and it's the most performant way to do it.\n\n```javascript\nvar items = ['one', 'two', 'three', 'four'];\nitems.splice(items.length / 2, 0, 'hello');\n```\n\nI tried to run these tests in various Browsers and OS and the results were similar. I hope these tips will be useful for you and encourage to perform your own tests!"},"2016-01-14-fat-arrow-functions.md":{"name":"2016-01-14-fat-arrow-functions.md","sha":"26380d1343799bfe41cd3098a56daf0e5ab49a12","content":"---\nlayout: post\n\ntitle: Fat Arrow Functions\ntip-number: 14\ntip-username: pklinger\ntip-username-profile: https://github.com/pklinger/\ntip-tldr: Introduced as a new feature in ES6, fat arrow functions may come as a handy tool to write more code in fewer lines\n\ncategories:\n    - en\n---\n\nIntroduced as a new feature in ES6, fat arrow functions may come as a handy tool to write more code in fewer lines. The name comes from its syntax, `=>`, which is a 'fat arrow', as compared to a thin arrow `->`. Some programmers might already know this type of function from different languages such as Haskell, as 'lambda expressions', or as 'anonymous functions'. It is called anonymous, as these arrow functions do not have a descriptive function name.\n\n### What are the benefits?\n* Syntax: fewer LOC; no more typing `function` keyword over and over again\n* Semantics: capturing the keyword `this` from the surrounding context\n\n### Simple syntax example\nHave a look at these two code snippets, which do the exact same job, and you will quickly understand what fat arrow functions do:\n\n```javascript\n// general syntax for fat arrow functions\nparam => expression\n\n// may also be written with parentheses\n// parentheses are required on multiple params\n(param1 [, param2]) => expression\n\n\n// using functions\nvar arr = [5,3,2,9,1];\nvar arrFunc = arr.map(function(x) {\n  return x * x;\n});\nconsole.log(arr)\n\n// using fat arrow\nvar arr = [5,3,2,9,1];\nvar arrFunc = arr.map((x) => x*x);\nconsole.log(arr)\n```\n\nAs you can see, the fat arrow function in this case can save you time typing out the parentheses as well as the function and return keywords. I would advise you to always write parentheses around the parameter inputs, as the parentheses will be needed for multiple input parameters, such as in `(x,y) => x+y`. It is just a way to cope with forgetting them in different use cases. But the code above would also work like this: `x => x*x`. So far, these are only syntactical improvements, which lead to fewer LOC and better readability.\n\n### Lexically binding `this`\n\nThere is another good reason to use fat arrow functions. There is the issue with the context of `this`. With arrow functions, you don't need to worry about `.bind(this)` or setting `that = this` anymore, as fat arrow functions pick the context of `this` from the lexical surrounding. Have a look at the next [example] (https://jsfiddle.net/pklinger/rw94oc11/):\n\n```javascript\n\n// globally defined this.i\nthis.i = 100;\n\nvar counterA = new CounterA();\nvar counterB = new CounterB();\nvar counterC = new CounterC();\nvar counterD = new CounterD();\n\n// bad example\nfunction CounterA() {\n  // CounterA's `this` instance (!! gets ignored here)\n  this.i = 0;\n  setInterval(function () {\n    // `this` refers to global object, not to CounterA's `this`\n    // therefore starts counting with 100, not with 0 (local this.i)\n    this.i++;\n    document.getElementById(\"counterA\").innerHTML = this.i;\n  }, 500);\n}\n\n// manually binding that = this\nfunction CounterB() {\n  this.i = 0;\n  var that = this;\n  setInterval(function() {\n    that.i++;\n    document.getElementById(\"counterB\").innerHTML = that.i;\n  }, 500);\n}\n\n// using .bind(this)\nfunction CounterC() {\n  this.i = 0;\n  setInterval(function() {\n    this.i++;\n    document.getElementById(\"counterC\").innerHTML = this.i;\n  }.bind(this), 500);\n}\n\n// fat arrow function\nfunction CounterD() {\n  this.i = 0;\n  setInterval(() => {\n    this.i++;\n    document.getElementById(\"counterD\").innerHTML = this.i;\n  }, 500);\n}\n```\n\nFurther information about fat arrow functions may be found at [MDN] (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions). To see different syntax options visit [this site] (http://jsrocks.org/2014/10/arrow-functions-and-their-scope/)."},"2016-01-25-Using-immediately-invoked-function-expression.md":{"name":"2016-01-25-Using-immediately-invoked-function-expression.md","sha":"8b60e4848b6950f40685f8c9975761d83c92afca","content":"---\nlayout: post\n\ntitle: Using immediately invoked function expression\ntip-number: 25\ntip-username: rishantagarwal \ntip-username-profile: https://github.com/rishantagarwal\ntip-tldr: Called as \"Iffy\" ( IIFE - immediately invoked function expression) is an anonymous function expression that is immediately invoked and has some important uses in Javascript.\n\n\ncategories:\n    - en\n---\n\nCalled as \"Iffy\" ( IIFE - immediately invoked function expression) is an anonymous function expression that is immediately invoked and has some important uses in Javascript.\n\n```javascript\n\n(function() {\n // Do something​\n }\n)()\n\n```\n\nIt is an anonymous function expression that is immediately invoked, and it has some particularly important uses in JavaScript.\n\nThe pair of parenthesis surrounding the anonymous function turns the anonymous function into a function expression or variable expression. So instead of a simple anonymous function in the global scope, or wherever it was defined, we now have an unnamed function expression.\n\nSimilarly, we can even create a named, immediately invoked function expression:\n\n```javascript\n(someNamedFunction = function(msg) {\n\tconsole.log(msg || \"Nothing for today !!\")\n\t}) (); // Output --> Nothing for today !!​\n​\nsomeNamedFunction(\"Javascript rocks !!\"); // Output --> Javascript rocks !!\nsomeNamedFunction(); // Output --> Nothing for today !!​\n```\n\nFor more details, check the following URL's - \n1. [Link 1](https://blog.mariusschulz.com/2016/01/13/disassembling-javascripts-iife-syntax) \n2. [Link 2](http://javascriptissexy.com/12-simple-yet-powerful-javascript-tips/) \n\nPerformance:\n[jsPerf](http://jsperf.com/iife-with-call)"},"2016-01-26-filtering-and-sorting-a-list-of-strings.md":{"name":"2016-01-26-filtering-and-sorting-a-list-of-strings.md","sha":"4aa85aa097316eeae06eed03e6d59a01cebec173","content":"---\nlayout: post\n\ntitle: Filtering and Sorting a List of Strings\ntip-number: 26\ntip-username: davegomez\ntip-username-profile: https://github.com/davegomez\ntip-tldr: You may have a big list of names you need to filter in order to remove duplicates and sort them alphabetically.\n\ncategories:\n    - en\n---\n\nYou may have a big list of names you need to filter in order to remove duplicates and sort them alphabetically.\n\nIn our example we are going to use the list of **JavaScript reserved keywords** we can find across the different versions of the language, but as you can notice, there is a lot of duplicated keywords and they are not alphabetically organized. So this is a perfect list ([Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)) of strings to test out this JavaScript tip.\n\n```js\nvar keywords = ['do', 'if', 'in', 'for', 'new', 'try', 'var', 'case', 'else', 'enum', 'null', 'this', 'true', 'void', 'with', 'break', 'catch', 'class', 'const', 'false', 'super', 'throw', 'while', 'delete', 'export', 'import', 'return', 'switch', 'typeof', 'default', 'extends', 'finally', 'continue', 'debugger', 'function', 'do', 'if', 'in', 'for', 'int', 'new', 'try', 'var', 'byte', 'case', 'char', 'else', 'enum', 'goto', 'long', 'null', 'this', 'true', 'void', 'with', 'break', 'catch', 'class', 'const', 'false', 'final', 'float', 'short', 'super', 'throw', 'while', 'delete', 'double', 'export', 'import', 'native', 'public', 'return', 'static', 'switch', 'throws', 'typeof', 'boolean', 'default', 'extends', 'finally', 'package', 'private', 'abstract', 'continue', 'debugger', 'function', 'volatile', 'interface', 'protected', 'transient', 'implements', 'instanceof', 'synchronized', 'do', 'if', 'in', 'for', 'let', 'new', 'try', 'var', 'case', 'else', 'enum', 'eval', 'null', 'this', 'true', 'void', 'with', 'break', 'catch', 'class', 'const', 'false', 'super', 'throw', 'while', 'yield', 'delete', 'export', 'import', 'public', 'return', 'static', 'switch', 'typeof', 'default', 'extends', 'finally', 'package', 'private', 'continue', 'debugger', 'function', 'arguments', 'interface', 'protected', 'implements', 'instanceof', 'do', 'if', 'in', 'for', 'let', 'new', 'try', 'var', 'case', 'else', 'enum', 'eval', 'null', 'this', 'true', 'void', 'with', 'await', 'break', 'catch', 'class', 'const', 'false', 'super', 'throw', 'while', 'yield', 'delete', 'export', 'import', 'public', 'return', 'static', 'switch', 'typeof', 'default', 'extends', 'finally', 'package', 'private', 'continue', 'debugger', 'function', 'arguments', 'interface', 'protected', 'implements', 'instanceof'];\n```\n\nSince we don't want to change our original list, we are going to use a high order function named [`filter`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/filter), which will return a new filter array based in a predicate (*function*) we pass to it. The predicate will compare the index of the current keyword in the original list with its `index` in the new list and will push it to the new array only if the indexes match.\n\nFinally we are going to sort the filtered list using the [`sort`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) function which takes a comparison function as the only argument, returning a alphabetically sorted list.\n\n```js\nvar filteredAndSortedKeywords = keywords\n  .filter(function (keyword, index) {\n      return keywords.indexOf(keyword) === index;\n    })\n  .sort(function (a, b) {\n      if (a < b) return -1;\n      else if (a > b) return 1;\n      return 0;\n    });\n```\n\nThe **ES6** (ECMAScript 2015) version using [arrow functions](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions) looks a little simpler:\n\n```js\nconst filteredAndSortedKeywords = keywords\n  .filter((keyword, index) => keywords.indexOf(keyword) === index)\n  .sort((a, b) => {\n      if (a < b) return -1;\n      else if (a > b) return 1;\n      return 0;\n    });\n```\n\nAnd this is the final filtered and sorted list of JavaScript reserved keywords:\n\n```js\nconsole.log(filteredAndSortedKeywords);\n\n// ['abstract', 'arguments', 'await', 'boolean', 'break', 'byte', 'case', 'catch', 'char', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'double', 'else', 'enum', 'eval', 'export', 'extends', 'false', 'final', 'finally', 'float', 'for', 'function', 'goto', 'if', 'implements', 'import', 'in', 'instanceof', 'int', 'interface', 'let', 'long', 'native', 'new', 'null', 'package', 'private', 'protected', 'public', 'return', 'short', 'static', 'super', 'switch', 'synchronized', 'this', 'throw', 'throws', 'transient', 'true', 'try', 'typeof', 'var', 'void', 'volatile', 'while', 'with', 'yield']\n```\n"},"2016-01-27-short-circiut-evaluation-in-js.md":{"name":"2016-01-27-short-circiut-evaluation-in-js.md","sha":"eff2855b25e11050615d44ce6354b2043dcce6b8","content":"---\nlayout: post\n\ntitle: Short circuit evaluation in JS.\ntip-number: 27\ntip-username: bhaskarmelkani\ntip-username-profile: https://www.twitter.com/bhaskarmelkani\ntip-tldr: Short-circuit evaluation says, the second argument is executed or evaluated only if the first argument does not suffice to determine the value of the expression, when the first argument of the AND (&&) function evaluates to false, the overall value must be false; and when the first argument of the OR (||) function evaluates to true, the overall value must be true.\n\ncategories:\n    - en\n---\n\n[Short-circuit evaluation](https://en.wikipedia.org/wiki/Short-circuit_evaluation) says, the second argument is executed or evaluated only if the first argument does not suffice to determine the value of the expression: when the first argument of the AND (`&&`) function evaluates to false, the overall value must be false; and when the first argument of the OR (`||`) function evaluates to true, the overall value must be true.\n\nFor the following `test` condition and `isTrue` and `isFalse` function.\n\n```js\nvar test = true;\nvar isTrue = function(){\n  console.log('Test is true.');\n};\nvar isFalse = function(){\n  console.log('Test is false.');\n};\n\n```\nUsing logical AND - `&&`.\n\n```js\n// A normal if statement.\nif(test){\n  isTrue();    // Test is true\n}\n\n// Above can be done using '&&' as -\n\n( test && isTrue() );  // Test is true\n```\nUsing logical OR - `||`.\n\n```js\ntest = false;\nif(!test){\n  isFalse();    // Test is false.\n}\n\n( test || isFalse());  // Test is false.\n```\nThe logical OR could also be used to set a default value for function argument.\n\n```js\nfunction theSameOldFoo(name){ \n    name = name || 'Bar' ;\n    console.log(\"My best friend's name is \" + name);\n}\ntheSameOldFoo();  // My best friend's name is Bar\ntheSameOldFoo('Bhaskar');  // My best friend's name is Bhaskar\n```\nThe logical AND could be used to avoid exceptions when using properties of undefined.\nExample:-\n\n```js\nvar dog = { \n  bark: function(){\n     console.log('Woof Woof');\n   }\n};\n\n// Calling dog.bark();\ndog.bark(); // Woof Woof.\n\n//But if dog is not defined, dog.bark() will raise an error \"Cannot read property 'bark' of undefined.\"\n// To prevent this, we can you &&.\n\ndog&&dog.bark();   // This will only call dog.bark(), if dog is defined.\n\n```\n"},"2016-01-29-speed-up-recursive-functions-with-memoization.md":{"name":"2016-01-29-speed-up-recursive-functions-with-memoization.md","sha":"529578df0f92eb624c6a12dd5b31767665ba2569","content":"---\nlayout: post\n\ntitle: Speed up recursive functions with memoization\ntip-number: 29\ntip-username: hingsir\ntip-username-profile: https://github.com/hingsir\ntip-tldr: Fibonacci sequence is very familiar to everybody. we can write the following function in 20 seconds.it works, but not efficient. it did lots of duplicate computing works, we can cache its previously computed results to speed it up.\n\n\ncategories:\n    - en\n---\n\nFibonacci sequence is very familiar to everybody. we can write the following function in 20 seconds.\n\n```js\nvar fibonacci = function(n){\n    return n < 2 ? n : fibonacci(n-1) + fibonacci(n-2);\n}\n```\nit works, but not efficient. it did lots of duplicate computing works, we can cache its previously computed results to speed it up.\n\n```js\nvar fibonacci = (function(){\n    var cache = {\n        0: 0,\n        1: 1\n    };\n    return function self(n){\n        return n in cache ? cache[n] : (cache[n] = self(n-1) + self(n-2));\n    }\n})()\n```\nAlso, we can define a higher-order function that accepts a function as its argument and returns a memoized version of the function.\n\n```js\nvar memoize = function(func){\n    var cache = {};\n    return function(){\n        var key = Array.prototype.slice.call(arguments).toString();\n        return key in cache ? cache[key] : (cache[key] = func.apply(this,arguments));\n    }\n}\nfibonacci = memoize(fibonacci);\n```\nAnd there is a ES6 version of the memoize function.\n\n```js\nvar memoize = function(func){\n    const cache = {};\n    return (...args) => {\n        const key = [...args].toString();\n        return key in cache ? cache[key] : (cache[key] = func(...args));\n    }\n}\nfibonacci = memoize(fibonacci);\n```\nwe can use `memoize()` in many other situations\n* GCD(Greatest Common Divisor)\n\n```js\nvar gcd = memoize(function(a,b){\n    var t;\n    if (a < b) t=b, b=a, a=t;\n    while(b != 0) t=b, b = a%b, a=t;\n    return a;\n})\ngcd(27,183); //=> 3\n```\n* Factorial calculation\n\n```js\nvar factorial = memoize(function(n) {\n    return (n <= 1) ? 1 : n * factorial(n-1);\n})\nfactorial(5); //=> 120\n```\n"},"2016-01-28-curry-vs-partial-application.md":{"name":"2016-01-28-curry-vs-partial-application.md","sha":"d26cd294ec9ed3943c2ffbd49ee11216e1383dc4","content":"---\nlayout: post\n\ntitle: Currying vs partial application\ntip-number: 28\ntip-username: bhaskarmelkani\ntip-username-profile: https://www.twitter.com/bhaskarmelkani\ntip-tldr: Currying and partial application are two ways of transforming a function into another function with a generally smaller arity.\n\n\ncategories:\n    - en\n---\n\n**Currying**\n\nCurrying takes a function \n\nf: X * Y -> R\n\nand turns it into a function\n\nf': X -> (Y -> R)\n\nInstead of calling f with two arguments, we invoke f' with the first argument. The result is a function that we then call with the second argument to produce the result. \n\nThus, if the uncurried f is invoked as\n\nf(3,5)\n\nthen the curried f' is invoked as\n\nf(3)(5)\n\nFor example:\nUncurried add()\n\n```javascript\n\nfunction add(x, y) {\n  return x + y;\n}\n\nadd(3, 5);   // returns 8\n```\n\nCurried add()\n\n```javascript\nfunction addC(x) {\n  return function (y) {\n    return x + y;\n  }\n}\n\naddC(3)(5);   // returns 8\n```\n\n**The algorithm for currying.** \n\nCurry takes a binary function and returns a unary function that returns a unary function.\n\ncurry: (X × Y → R) → (X → (Y → R))\n\nJavascript Code:\n\n```javascript\nfunction curry(f) {\n  return function(x) {\n    return function(y) {\n      return f(x, y);\n    }\n  }\n}\n```\n\n**Partial application**\n\nPartial application takes a function\n\nf: X * Y -> R\n\nand a fixed value for the first argument to produce a new function\n\nf`: Y -> R\n\nf' does the same as f, but only has to fill in the second parameter which is why its arity is one less than the arity of f.\n\nFor example: Binding the first argument of function add to 5 produces the function plus5.\n\n```javascript\nfunction plus5(y) {\n  return 5 + y;\n}\n\nplus5(3);  // returns 8\n```\n\n**The algorithm of partial application.*** \n\npartApply takes a binary function and a value and produces a unary function. \n\npartApply : ((X × Y → R) × X) → (Y → R)\n\nJavascript Code:\n\n```javascript\nfunction partApply(f, x) {\n  return function(y) {\n    return f(x, y);\n  }\n}\n```\n"},"2016-01-30-converting-truthy-falsy-values-to-boolean.md":{"name":"2016-01-30-converting-truthy-falsy-values-to-boolean.md","sha":"d430f327badcd3fc75c7319da436fba7da03d0b4","content":"---\nlayout: post\n\ntitle: Converting truthy/falsy values to boolean\ntip-number: 30\ntip-username: hakhag\ntip-username-profile: https://github.com/hakhag\ntip-tldr: Logical operators are a core part of JavaScript, here you can see a a way you always get a true or false no matter what was given to it.\n\n\ncategories:\n    - en\n---\n\nYou can convert a [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) or [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) value to true boolean with the `!!` operator.\n\n```js\n!!\"\" // false\n!!0 // false\n!!null // false\n!!undefined // false\n!!NaN // false\n\n!!\"hello\" // true\n!!1 // true\n!!{} // true\n!![] // true\n```\n\n"},"2016-02-01-map-to-the-rescue-adding-order-to-object-properties.md":{"name":"2016-02-01-map-to-the-rescue-adding-order-to-object-properties.md","sha":"d488ea29fc53f6ea4b67e8a380a1b9a4045156d0","content":"---\nlayout: post\n\ntitle: Map() to the rescue; adding order to Object properties\ntip-number: 32\ntip-username: loverajoel\ntip-username-profile: https://twitter.com/loverajoel\ntip-tldr: An Object it is an unordered collection of properties... that means that if you are trying to save ordered data inside an Object, you have to review it because properties order in objects are not guaranteed.\n\ncategories:\n    - en\n---\n\n## Object properties order\n\n> An object is a member of the type Object. It is an unordered collection of properties each of which contains a primitive value, object, or function. A function stored in a property of an object is called a method. [ECMAScript](http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf)\n\nTake a look in action\n\n```js\nvar myObject = {\n\tz: 1,\n\t'@': 2,\n\tb: 3,\n\t1: 4,\n\t5: 5\n};\nconsole.log(myObject) // Object {1: 4, 5: 5, z: 1, @: 2, b: 3}\n\nfor (item in myObject) {...\n// 1\n// 5\n// z\n// @\n// b\n```\nEach browser have his own rules about the order in objects bebause technically, order is unspecified.\n\n## How to solve this?\n\n### Map\n\nUsing a new ES6 feature called Map. A [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) object iterates its elements in insertion order — a `for...of` loop returns an array of [key, value] for each iteration. \n\n```js\nvar myObject = new Map();\nmyObject.set('z', 1);\nmyObject.set('@', 2);\nmyObject.set('b', 3);\nfor (var [key, value] of myObject) {\n  console.log(key, value);\n...\n// z 1\n// @ 2\n// b 3\n```\n\n### Hack for old browsers\n\nMozilla suggest:\n> So, if you want to simulate an ordered associative array in a cross-browser environment, you are forced to either use two separate arrays (one for the keys and the other for the values), or build an array of single-property objects, etc.\n\n```js\n// Using two separate arrays\nvar objectKeys = [z, @, b, 1, 5];\nfor (item in objectKeys) {\n\tmyObject[item]\n...\n\n// Build an array of single-property objects\nvar myData = [{z: 1}, {'@': 2}, {b: 3}, {1: 4}, {5: 5}];\n```\n"},"2016-01-31-avoid-modifying-or-passing-arguments-into-other-functions—it-kills-optimization.md":{"name":"2016-01-31-avoid-modifying-or-passing-arguments-into-other-functions—it-kills-optimization.md","sha":"b71d540cceff1138e1217af46ee5e4ff0d95a59f","content":"---\nlayout: post\n\ntitle: Avoid modifying or passing `arguments` into other functions — it kills optimization\ntip-number: 31\ntip-username: berkana\ntip-username-profile: https://github.com/berkana\ntip-tldr: Within JavaScript functions, the variable name `arguments` lets you access all of the arguments passed to the function. `arguments` is an *array-like object*; `arguments` can be accessed using array notation, and it has the *length* property, but it doesn't have many of the built-in methods that arrays have such as `filter` and `map` and `forEach`. Because of this, it is a fairly common practice to convert `arguments` into an array using the following snipet\n\n\ncategories:\n    - en\n---\n\n###Background\n\nWithin JavaScript functions, the variable name [`arguments`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments) lets you access all of the arguments passed to the function. `arguments` is an *array-like object*; `arguments` can be accessed using array notation, and it has the *length* property, but it doesn't have many of the built-in methods that arrays have such as `filter` and `map` and `forEach`. Because of this, it is a fairly common practice to convert `arguments` into an array using the following:\n\n```js\nvar args = Array.prototype.slice.call(arguments);\n```\nThis calls the `slice` method from the `Array` prototype, passing it `arguments`; the `slice` method returns a shallow copy of `arguments` as a new array object. A common shorthand for this is :\n\n```js\nvar args = [].slice.call(arguments);\n```\nIn this case, instead of calling `slice` from the `Array` prototype, it is simply being called from an empty array literal.\n\n###Optimization\n\nUnfortunately, passing `arguments` into any function call will cause the V8 JavaScript engine used in Chrome and Node to skip optimization on the function that does this, which can result in considerably slower performance. See this article on [optimization killers](https://github.com/petkaantonov/bluebird/wiki/Optimization-killers). Passing `arguments` to any other function is known as *leaking `arguments`*.\n\nInstead, if you want an array of the arguments that lets you use you need to resort to this:\n\n```js\nvar args = new Array(arguments.length);\nfor(var i = 0; i < args.length; ++i) {\n  args[i] = arguments[i];\n}\n```\n\nYes it is more verbose, but in production code, it is worth it for the performance optimization."},"2016-02-03-implementing-asynchronous-loops.md":{"name":"2016-02-03-implementing-asynchronous-loops.md","sha":"5ea743ccb6aa7ef194bcba012918713cba9db3a4","content":"---\nlayout: post\n\ntitle: Implementing asynchronous loop\ntip-number: 34\ntip-username: madmantalking\ntip-username-profile: https://github.com/madmantalking\ntip-tldr: You may run into problems while implementing asynchronous loops. \n\ncategories:\n    - en\n---\n\nLet's try out writing an asynchronous function which prints the value of the loop index every second.\n\n```js\nfor (var i=0; i<5; i++) {\n\tsetTimeout(function(){\n\t\tconsole.log(i); \n\t}, 1000);\n}  \n```\nThe output of the above programs turns out to be\n\n```js\n> 5\n> 5\n> 5\n> 5\n> 5\n```\nSo this definitely doesn't work.\n\n**Reason**\n\nEach timeout refers to the original `i`, not a copy. So the for loop increments `i` until it gets to 5, then the timeouts run and use the current value of `i` (which is 5).\n\nWell , this problem seems easy. An immediate solution that strikes is to cache the loop index in a temporary variable.\n\n```js\nfor (var i=0; i<5; i++) {\n\tvar temp = i;\n \tsetTimeout(function(){\n\t\tconsole.log(temp); \n\t}, 1000);\n}  \n```\nBut again the output of the above programs turns out to be\n\n```js\n> 4\n> 4\n> 4\n> 4\n> 4\n```\n\nSo , that doesn't work either , because blocks don't create a scope and variables initializers are hoisted to the top of the scope. In fact, the previous block is the same as:\n\n```js\nvar temp;\nfor (var i=0; i<5; i++) {\n \ttemp = i;\n\tsetTimeout(function(){\n\t\tconsole.log(temp); \n  \t}, 1000);\n}  \n```\n**Solution**\n\nThere are a few different ways to copy `i`. The most common way is creating a closure by declaring a function and passing `i` as an argument. Here we do this as a self-calling function.\n\n```js\nfor (var i=0; i<5; i++) {\n\t(function(num){\n\t\tsetTimeout(function(){\n\t\t\tconsole.log(num); \n\t\t}, 1000); \n\t})(i);  \n}  \n```\nIn JavaScript, arguments are passed by value to a function. So primitive types like numbers, dates, and strings are basically copied. If you change them inside the function, it does not affect the outside scope. Objects are special: if the inside function changes a property, the change is reflected in all scopes.\n\nAnother approach for this would be with using `let`. With ES6 the `let` keyword is useful since it's block scoped unlike `var`\n\n```js\nfor (let i=0; i<5; i++) {\n\tvar temp = i;\n \tsetTimeout(function(){\n\t\tconsole.log(temp); \n\t}, 1000);\n}  \n```\n"},"2016-02-04-assignment-shorthands.md":{"name":"2016-02-04-assignment-shorthands.md","sha":"dfb46c7589400f3c60a5c413ce66f60e1f088cce","content":"---\nlayout: post\n\ntitle: Assignment Operators\ntip-number: 35\ntip-username: hsleonis\ntip-username-profile: https://github.com/hsleonis\ntip-tldr: Assigning is very common. Sometimes typing becomes time consuming for us 'Lazy programmers'. So, we can use some tricks to help us and make our code cleaner and simpler.\n\ncategories:\n    - en\n---\n\nAssigning is very common. Sometimes typing becomes time consuming for us 'Lazy programmers'.\nSo, we can use some tricks to help us and make our code cleaner and simpler.\n\nThis is the similiar use of\n\n````javascript\nx += 23; // x = x + 23;\ny -= 15; // y = y - 15;\nz *= 10; // z = z * 10;\nk /= 7; // k = k / 7;\np %= 3; // p = p % 3;\nd **= 2; // d = d ** 2;\nm >>= 2; // m = m >> 2;\nn <<= 2; // n = n << 2;\nn ++; // n = n + 1;\nn --; n = n - 1;\n\n````\n\n### If-else (Using ternary operator)\n\nThis is what we write on regular basis.\n\n````javascript\nvar newValue;\nif(value > 10) \n  newValue = 5;\nelse\n  newValue = 2;\n````\n\nWe can user ternary operator to make it awesome:\n\n````javascript\nvar newValue = (value > 10) ? 5 : 2;\n````\n\n### Null, Undefined, Empty Checks\n\n````javascript\nif (variable1 !== null || variable1 !== undefined || variable1 !== '') {\n     var variable2 = variable1;\n}\n````\n\nShorthand here:\n\n````javascript\nvar variable2 = variable1  || '';\n````\nP.S.: If variable1 is a number, then first check if it is 0.\n\n### Object Array Notation\n\nInstead of using:\n\n````javascript\nvar a = new Array();\na[0] = \"myString1\";\na[1] = \"myString2\";\n````\nUse this:\n\n````javascript\nvar a = [\"myString1\", \"myString2\"];\n````\n\n### Associative array\n\nInstead of using:\n\n````javascript\nvar skillSet = new Array();\nskillSet['Document language'] = 'HTML5';\nskillSet['Styling language'] = 'CSS3';\n````\n\nUse this:\n\n````javascript\nvar skillSet = {\n    'Document language' : 'HTML5', \n    'Styling language' : 'CSS3'\n};\n````\n"},"2016-02-02-create-range-0...n-easily-using-one-line.md":{"name":"2016-02-02-create-range-0...n-easily-using-one-line.md","sha":"371b9230d2cbafc79005c5ef3794314db16a3329","content":"---\nlayout: post\n\ntitle: Create Range 0...(N-1) easily using one line\ntip-number: 33\ntip-username: SarjuHansaliya\ntip-username-profile: https://github.com/SarjuHansaliya\ntip-tldr: We can create range function which will give 0...(N-1) range using one line only\n\n\ncategories:\n    - en\n---\n\nBelow is the line with which we can create 0...(N-1) range.\n\n```js\nArray.apply(null, {length: N}).map(Number.call, Number);\n```\n\nLets break down this line into parts. We know how `call()` function works in javascript. So in `call()` first argument will be context and from second arguments, it will be list of arguments of function on which we are calling `call()` function.\n\n```js\nfunction add(a, b){\n    return (a+b);\n}\nadd.call(null, 5, 6);\n```\nThis will return a sum of 5 and 6.\n\n`map()` of array in javascript takes two arguments, first `callback` and second `thisArg(context)`. `callback` is taking three arguments, `value`, `index` and whole array on which we are iterating. So common syntax is like: \n\n```js\n[1, 2, 3].map(function(value, index, arr){\n    //Code\n}, this);\n```\nBelow line create array of given length.\n\n```js\nArray.apply(null, {length: N})\n```\nPutting all parts together below is the solution.\n\n```js\nArray.apply(null, {length: N}).map(Number.call, Number);\n```\n\nIf you want range 1...N, it will be like this.\n\n```js\nArray.apply(null, {length: N}).map(function(value, index){\n  return index+1;  \n});\n```\n"}}